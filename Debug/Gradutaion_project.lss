
Gradutaion_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002fee  00003082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800080  00800080  000030a2  2**0
                  ALLOC
  3 .stab         00002dc0  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000148f  00000000  00000000  00005e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000072f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007433  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000091ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ae84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000afe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b271  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba3f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__vector_10>
      2c:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <main>
      8a:	0c 94 f5 17 	jmp	0x2fea	; 0x2fea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 17 	jmp	0x2fb4	; 0x2fb4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ca 17 	jmp	0x2f94	; 0x2f94 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e6 17 	jmp	0x2fcc	; 0x2fcc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ea 17 	jmp	0x2fd4	; 0x2fd4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MTIMER0_Init>:
 * 3-Set Interrupt State
 * 4-Set Prescalar
 */

void MTIMER0_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,1);
#endif

	//============================FAST PWM MODE
#elif TIMER0_MODE==TIMER_FAST_PWM_MODE
	SET_BIT(TCCR0,3);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,6);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
		//Set PWM Wave on OC0
	#if TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_DISCONNECTED
		CLR_BIT(TCCR0,4);
		CLR_BIT(TCCR0,5);
	#elif TIMER0_FAST_PWM_WAVE_MODE==FAST_PWM_OC0_NON_INVERTING
		CLR_BIT(TCCR0,4);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 7e       	andi	r24, 0xEF	; 239
     b76:	8c 93       	st	X, r24
		SET_BIT(TCCR0,5);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_64
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	CLR_BIT(TCCR0,2);
#elif TIMER0_CLOCK_SOURCE==PRESCALAR_OVER_256
	CLR_BIT(TCCR0,0);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,1);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8d 7f       	andi	r24, 0xFD	; 253
     ba0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,2);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	84 60       	ori	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
	SET_BIT(TCCR0,0);
	SET_BIT(TCCR0,1);
	SET_BIT(TCCR0,2);
#endif

}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <MTIMER0_SetPreload>:

void MTIMER0_SetPreload(u8 Copy_u8Preload)
{
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	89 83       	std	Y+1, r24	; 0x01
	TCCR0=Copy_u8Preload;
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	80 83       	st	Z, r24

}
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <MTIMER0_SetCTC>:

void MTIMER0_SetCTC(u8 Copy_u8OCR)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8OCR;
     bde:	ec e5       	ldi	r30, 0x5C	; 92
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	89 81       	ldd	r24, Y+1	; 0x01
     be4:	80 83       	st	Z, r24
}
     be6:	0f 90       	pop	r0
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <MTIMER0_OVERFLOW_CALLBACK>:


void MTIMER0_OVERFLOW_CALLBACK(void(*Ptr_OverflowApp)(void))
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	00 d0       	rcall	.+0      	; 0xbf4 <MTIMER0_OVERFLOW_CALLBACK+0x6>
     bf4:	cd b7       	in	r28, 0x3d	; 61
     bf6:	de b7       	in	r29, 0x3e	; 62
     bf8:	9a 83       	std	Y+2, r25	; 0x02
     bfa:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_OverflowApp!=NULL)
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	9a 81       	ldd	r25, Y+2	; 0x02
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	61 f0       	breq	.+24     	; 0xc1c <MTIMER0_OVERFLOW_CALLBACK+0x2e>
	{
		if(Glob_OverflowISR_Ptr==NULL)
     c04:	80 91 80 00 	lds	r24, 0x0080
     c08:	90 91 81 00 	lds	r25, 0x0081
     c0c:	00 97       	sbiw	r24, 0x00	; 0
     c0e:	31 f4       	brne	.+12     	; 0xc1c <MTIMER0_OVERFLOW_CALLBACK+0x2e>
		{
			Glob_OverflowISR_Ptr=Ptr_OverflowApp;
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	9a 81       	ldd	r25, Y+2	; 0x02
     c14:	90 93 81 00 	sts	0x0081, r25
     c18:	80 93 80 00 	sts	0x0080, r24
		}
	}
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	08 95       	ret

00000c26 <MTIMER0_CTC_CALLBACK>:


void MTIMER0_CTC_CALLBACK(void(*Ptr_CTCApp)(void))
{
     c26:	df 93       	push	r29
     c28:	cf 93       	push	r28
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <MTIMER0_CTC_CALLBACK+0x6>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	89 83       	std	Y+1, r24	; 0x01
	if(Ptr_CTCApp !=NULL)
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	9a 81       	ldd	r25, Y+2	; 0x02
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	61 f0       	breq	.+24     	; 0xc54 <MTIMER0_CTC_CALLBACK+0x2e>
	{
		if(Glob_CTC_ISR_Ptr==NULL)
     c3c:	80 91 82 00 	lds	r24, 0x0082
     c40:	90 91 83 00 	lds	r25, 0x0083
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	31 f4       	brne	.+12     	; 0xc54 <MTIMER0_CTC_CALLBACK+0x2e>
		{
			Glob_CTC_ISR_Ptr=Ptr_CTCApp;
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	9a 81       	ldd	r25, Y+2	; 0x02
     c4c:	90 93 83 00 	sts	0x0083, r25
     c50:	80 93 82 00 	sts	0x0082, r24
		}
	}
}
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <MTIMER0_SetDutyCycle>:

void MTIMER0_SetDutyCycle(u8 Copy_u8DutyCycle)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <MTIMER0_SetDutyCycle+0x6>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	8a 83       	std	Y+2, r24	; 0x02
	u8 CTC_Value ;
	if ((Copy_u8DutyCycle>=0) && (Copy_u8DutyCycle<=100))
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	85 36       	cpi	r24, 0x65	; 101
     c6e:	20 f5       	brcc	.+72     	; 0xcb8 <MTIMER0_SetDutyCycle+0x5a>
	{
		CTC_Value = ((u32)(Copy_u8DutyCycle*255))/100;
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	48 2f       	mov	r20, r24
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	ca 01       	movw	r24, r20
     c78:	9c 01       	movw	r18, r24
     c7a:	22 0f       	add	r18, r18
     c7c:	33 1f       	adc	r19, r19
     c7e:	c9 01       	movw	r24, r18
     c80:	96 95       	lsr	r25
     c82:	98 2f       	mov	r25, r24
     c84:	88 27       	eor	r24, r24
     c86:	97 95       	ror	r25
     c88:	87 95       	ror	r24
     c8a:	82 1b       	sub	r24, r18
     c8c:	93 0b       	sbc	r25, r19
     c8e:	84 0f       	add	r24, r20
     c90:	95 1f       	adc	r25, r21
     c92:	aa 27       	eor	r26, r26
     c94:	97 fd       	sbrc	r25, 7
     c96:	a0 95       	com	r26
     c98:	ba 2f       	mov	r27, r26
     c9a:	24 e6       	ldi	r18, 0x64	; 100
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	bc 01       	movw	r22, r24
     ca4:	cd 01       	movw	r24, r26
     ca6:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodsi4>
     caa:	da 01       	movw	r26, r20
     cac:	c9 01       	movw	r24, r18
     cae:	89 83       	std	Y+1, r24	; 0x01
		OCR0 = CTC_Value;
     cb0:	ec e5       	ldi	r30, 0x5C	; 92
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	80 83       	st	Z, r24
	}
}
     cb8:	0f 90       	pop	r0
     cba:	0f 90       	pop	r0
     cbc:	cf 91       	pop	r28
     cbe:	df 91       	pop	r29
     cc0:	08 95       	ret

00000cc2 <__vector_10>:


//CTC ISR
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
     cc2:	1f 92       	push	r1
     cc4:	0f 92       	push	r0
     cc6:	0f b6       	in	r0, 0x3f	; 63
     cc8:	0f 92       	push	r0
     cca:	11 24       	eor	r1, r1
     ccc:	2f 93       	push	r18
     cce:	3f 93       	push	r19
     cd0:	4f 93       	push	r20
     cd2:	5f 93       	push	r21
     cd4:	6f 93       	push	r22
     cd6:	7f 93       	push	r23
     cd8:	8f 93       	push	r24
     cda:	9f 93       	push	r25
     cdc:	af 93       	push	r26
     cde:	bf 93       	push	r27
     ce0:	ef 93       	push	r30
     ce2:	ff 93       	push	r31
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
	if(Glob_CTC_ISR_Ptr!=NULL)
     cec:	80 91 82 00 	lds	r24, 0x0082
     cf0:	90 91 83 00 	lds	r25, 0x0083
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	29 f0       	breq	.+10     	; 0xd02 <__vector_10+0x40>
	{
		Glob_CTC_ISR_Ptr();
     cf8:	e0 91 82 00 	lds	r30, 0x0082
     cfc:	f0 91 83 00 	lds	r31, 0x0083
     d00:	09 95       	icall
	}
}
     d02:	cf 91       	pop	r28
     d04:	df 91       	pop	r29
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_11>:

//Overflow ISR
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
	if(Glob_OverflowISR_Ptr!=NULL)
     d52:	80 91 80 00 	lds	r24, 0x0080
     d56:	90 91 81 00 	lds	r25, 0x0081
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	29 f0       	breq	.+10     	; 0xd68 <__vector_11+0x40>
	{
		Glob_OverflowISR_Ptr();
     d5e:	e0 91 80 00 	lds	r30, 0x0080
     d62:	f0 91 81 00 	lds	r31, 0x0081
     d66:	09 95       	icall
	}
}
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	ff 91       	pop	r31
     d6e:	ef 91       	pop	r30
     d70:	bf 91       	pop	r27
     d72:	af 91       	pop	r26
     d74:	9f 91       	pop	r25
     d76:	8f 91       	pop	r24
     d78:	7f 91       	pop	r23
     d7a:	6f 91       	pop	r22
     d7c:	5f 91       	pop	r21
     d7e:	4f 91       	pop	r20
     d80:	3f 91       	pop	r19
     d82:	2f 91       	pop	r18
     d84:	0f 90       	pop	r0
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	0f 90       	pop	r0
     d8a:	1f 90       	pop	r1
     d8c:	18 95       	reti

00000d8e <MGIE_Enable>:
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include "MGIE_Private.h"
#include <util/delay.h>

void MGIE_Enable(void)
{
     d8e:	df 93       	push	r29
     d90:	cf 93       	push	r28
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,7);
     d96:	af e5       	ldi	r26, 0x5F	; 95
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	ef e5       	ldi	r30, 0x5F	; 95
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	8c 93       	st	X, r24
}
     da4:	cf 91       	pop	r28
     da6:	df 91       	pop	r29
     da8:	08 95       	ret

00000daa <MGIE_Disable>:
void MGIE_Disable(void)
{
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,7);
     db2:	af e5       	ldi	r26, 0x5F	; 95
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef e5       	ldi	r30, 0x5F	; 95
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	8c 93       	st	X, r24
}
     dc0:	cf 91       	pop	r28
     dc2:	df 91       	pop	r29
     dc4:	08 95       	ret

00000dc6 <MEXTI_Callback>:


void (*Global_Pointer)(void)=NULL;

void MEXTI_Callback(void(*Loc_PtrToFunc)(void))
{
     dc6:	df 93       	push	r29
     dc8:	cf 93       	push	r28
     dca:	00 d0       	rcall	.+0      	; 0xdcc <MEXTI_Callback+0x6>
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
	if (Loc_PtrToFunc!=NULL)
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	00 97       	sbiw	r24, 0x00	; 0
     dda:	31 f0       	breq	.+12     	; 0xde8 <MEXTI_Callback+0x22>
	{
		Global_Pointer=Loc_PtrToFunc;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	90 93 85 00 	sts	0x0085, r25
     de4:	80 93 84 00 	sts	0x0084, r24
	}
}
     de8:	0f 90       	pop	r0
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <__vector_1>:

// ISR for INT0 ==> 1-1 = 0 from table
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
     df2:	1f 92       	push	r1
     df4:	0f 92       	push	r0
     df6:	0f b6       	in	r0, 0x3f	; 63
     df8:	0f 92       	push	r0
     dfa:	11 24       	eor	r1, r1
     dfc:	2f 93       	push	r18
     dfe:	3f 93       	push	r19
     e00:	4f 93       	push	r20
     e02:	5f 93       	push	r21
     e04:	6f 93       	push	r22
     e06:	7f 93       	push	r23
     e08:	8f 93       	push	r24
     e0a:	9f 93       	push	r25
     e0c:	af 93       	push	r26
     e0e:	bf 93       	push	r27
     e10:	ef 93       	push	r30
     e12:	ff 93       	push	r31
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
	if (Global_Pointer!=NULL)
     e1c:	80 91 84 00 	lds	r24, 0x0084
     e20:	90 91 85 00 	lds	r25, 0x0085
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	29 f0       	breq	.+10     	; 0xe32 <__vector_1+0x40>
	{
		Global_Pointer();
     e28:	e0 91 84 00 	lds	r30, 0x0084
     e2c:	f0 91 85 00 	lds	r31, 0x0085
     e30:	09 95       	icall
	}
}
     e32:	cf 91       	pop	r28
     e34:	df 91       	pop	r29
     e36:	ff 91       	pop	r31
     e38:	ef 91       	pop	r30
     e3a:	bf 91       	pop	r27
     e3c:	af 91       	pop	r26
     e3e:	9f 91       	pop	r25
     e40:	8f 91       	pop	r24
     e42:	7f 91       	pop	r23
     e44:	6f 91       	pop	r22
     e46:	5f 91       	pop	r21
     e48:	4f 91       	pop	r20
     e4a:	3f 91       	pop	r19
     e4c:	2f 91       	pop	r18
     e4e:	0f 90       	pop	r0
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	0f 90       	pop	r0
     e54:	1f 90       	pop	r1
     e56:	18 95       	reti

00000e58 <MEXTI0_Init>:
/*
 * 1- Set Sense Control
 * 2- Enable PIE
 */
void MEXTI0_Init()
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	// Selective macros defines Prebuild configuration , conditional compilation
#if MEXTI_SENSE_CONTROL_STATE == MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,0);
     e60:	a5 e5       	ldi	r26, 0x55	; 85
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e5 e5       	ldi	r30, 0x55	; 85
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	8e 7f       	andi	r24, 0xFE	; 254
     e6c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,1);
     e6e:	a5 e5       	ldi	r26, 0x55	; 85
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e5 e5       	ldi	r30, 0x55	; 85
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8d 7f       	andi	r24, 0xFD	; 253
     e7a:	8c 93       	st	X, r24
	SET_BIT(MCUCR,1);
	SET_BIT(MCUCR,1);
#endif

	/*Enable Interrupt On INT0 ==> PIE of interrupt Zero */
	SET_BIT(GICR,6);
     e7c:	ab e5       	ldi	r26, 0x5B	; 91
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	eb e5       	ldi	r30, 0x5B	; 91
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 64       	ori	r24, 0x40	; 64
     e88:	8c 93       	st	X, r24
}
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <MEXTI1_Init>:
void MEXTI1_Init()
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	cd b7       	in	r28, 0x3d	; 61
     e96:	de b7       	in	r29, 0x3e	; 62
	// Selective macros defines Prebuild configuration , conditional compilation
#if MEXTI_SENSE_CONTROL_STATE == MEXTI_LOW_LEVEL
	CLR_BIT(MCUCR,2);
     e98:	a5 e5       	ldi	r26, 0x55	; 85
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e5 e5       	ldi	r30, 0x55	; 85
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24
	CLR_BIT(MCUCR,3);
     ea6:	a5 e5       	ldi	r26, 0x55	; 85
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	e5 e5       	ldi	r30, 0x55	; 85
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	87 7f       	andi	r24, 0xF7	; 247
     eb2:	8c 93       	st	X, r24
#elif EXTI_SENSE_CONTROL_STATE == MEXTI_FALLING_EDGE
	SET_BIT(MCUCR,2);
	SET_BIT(MCUCR,3);
#endif

}
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <MEXTI2_Init>:
void MEXTI2_Init()
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62


}
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <MEXTI_SetSenseControl>:

void MEXTI_SetSenseControl(u8 Copy_u8Interrupt_ID, u8 Copy_u8mode)
{
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	00 d0       	rcall	.+0      	; 0xece <MEXTI_SetSenseControl+0x6>
     ece:	cd b7       	in	r28, 0x3d	; 61
     ed0:	de b7       	in	r29, 0x3e	; 62
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	6a 83       	std	Y+2, r22	; 0x02

}
     ed6:	0f 90       	pop	r0
     ed8:	0f 90       	pop	r0
     eda:	cf 91       	pop	r28
     edc:	df 91       	pop	r29
     ede:	08 95       	ret

00000ee0 <MDIO_SetPortDirection>:
#include "../../LIB/BIT_MATH.h"
#include "MDIO_Interface.h"
#include "MDIO_Private.h"

void MDIO_SetPortDirection(u8 Copy_u8PortNo , u8 Copy_u8PortDir )
{
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	00 d0       	rcall	.+0      	; 0xee6 <MDIO_SetPortDirection+0x6>
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <MDIO_SetPortDirection+0x8>
     ee8:	cd b7       	in	r28, 0x3d	; 61
     eea:	de b7       	in	r29, 0x3e	; 62
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	6a 83       	std	Y+2, r22	; 0x02
	if ((Copy_u8PortDir==PORT_OUTPUT) || (Copy_u8PortDir == PORT_INPUT))
     ef0:	8a 81       	ldd	r24, Y+2	; 0x02
     ef2:	8f 3f       	cpi	r24, 0xFF	; 255
     ef4:	19 f0       	breq	.+6      	; 0xefc <MDIO_SetPortDirection+0x1c>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	88 23       	and	r24, r24
     efa:	91 f5       	brne	.+100    	; 0xf60 <MDIO_SetPortDirection+0x80>
	{ /*Valid port direction given*/
		switch (Copy_u8PortNo)
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	28 2f       	mov	r18, r24
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	3c 83       	std	Y+4, r19	; 0x04
     f04:	2b 83       	std	Y+3, r18	; 0x03
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	91 05       	cpc	r25, r1
     f0e:	d1 f0       	breq	.+52     	; 0xf44 <MDIO_SetPortDirection+0x64>
     f10:	2b 81       	ldd	r18, Y+3	; 0x03
     f12:	3c 81       	ldd	r19, Y+4	; 0x04
     f14:	22 30       	cpi	r18, 0x02	; 2
     f16:	31 05       	cpc	r19, r1
     f18:	2c f4       	brge	.+10     	; 0xf24 <MDIO_SetPortDirection+0x44>
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	61 f0       	breq	.+24     	; 0xf3a <MDIO_SetPortDirection+0x5a>
     f22:	1e c0       	rjmp	.+60     	; 0xf60 <MDIO_SetPortDirection+0x80>
     f24:	2b 81       	ldd	r18, Y+3	; 0x03
     f26:	3c 81       	ldd	r19, Y+4	; 0x04
     f28:	22 30       	cpi	r18, 0x02	; 2
     f2a:	31 05       	cpc	r19, r1
     f2c:	81 f0       	breq	.+32     	; 0xf4e <MDIO_SetPortDirection+0x6e>
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	83 30       	cpi	r24, 0x03	; 3
     f34:	91 05       	cpc	r25, r1
     f36:	81 f0       	breq	.+32     	; 0xf58 <MDIO_SetPortDirection+0x78>
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <MDIO_SetPortDirection+0x80>
		{
		case MDIO_PORTA:
			DDRA = Copy_u8PortDir;
     f3a:	ea e3       	ldi	r30, 0x3A	; 58
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	80 83       	st	Z, r24
     f42:	0e c0       	rjmp	.+28     	; 0xf60 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTB:
			DDRB = Copy_u8PortDir;
     f44:	e7 e3       	ldi	r30, 0x37	; 55
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	80 83       	st	Z, r24
     f4c:	09 c0       	rjmp	.+18     	; 0xf60 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTC:
			DDRC = Copy_u8PortDir;
     f4e:	e4 e3       	ldi	r30, 0x34	; 52
     f50:	f0 e0       	ldi	r31, 0x00	; 0
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	80 83       	st	Z, r24
     f56:	04 c0       	rjmp	.+8      	; 0xf60 <MDIO_SetPortDirection+0x80>
			break;
		case MDIO_PORTD:
			DDRD = Copy_u8PortDir;
     f58:	e1 e3       	ldi	r30, 0x31	; 49
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	80 83       	st	Z, r24
	}
	else
	{
		/*Valid port direction given*/
	}
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	cf 91       	pop	r28
     f6a:	df 91       	pop	r29
     f6c:	08 95       	ret

00000f6e <MDIO_SetPinDirection>:
void MDIO_SetPinDirection(u8 Copy_u8PinNo , u8 Copy_u8PortNo , u8 Copy_u8PinDir )
{
     f6e:	df 93       	push	r29
     f70:	cf 93       	push	r28
     f72:	00 d0       	rcall	.+0      	; 0xf74 <MDIO_SetPinDirection+0x6>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <MDIO_SetPinDirection+0x8>
     f76:	0f 92       	push	r0
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	6a 83       	std	Y+2, r22	; 0x02
     f80:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	08 f0       	brcs	.+2      	; 0xf8a <MDIO_SetPinDirection+0x1c>
     f88:	e0 c0       	rjmp	.+448    	; 0x114a <MDIO_SetPinDirection+0x1dc>
	{
		switch (Copy_u8PortNo)
     f8a:	8a 81       	ldd	r24, Y+2	; 0x02
     f8c:	28 2f       	mov	r18, r24
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	3d 83       	std	Y+5, r19	; 0x05
     f92:	2c 83       	std	Y+4, r18	; 0x04
     f94:	8c 81       	ldd	r24, Y+4	; 0x04
     f96:	9d 81       	ldd	r25, Y+5	; 0x05
     f98:	81 30       	cpi	r24, 0x01	; 1
     f9a:	91 05       	cpc	r25, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <MDIO_SetPinDirection+0x32>
     f9e:	47 c0       	rjmp	.+142    	; 0x102e <MDIO_SetPinDirection+0xc0>
     fa0:	2c 81       	ldd	r18, Y+4	; 0x04
     fa2:	3d 81       	ldd	r19, Y+5	; 0x05
     fa4:	22 30       	cpi	r18, 0x02	; 2
     fa6:	31 05       	cpc	r19, r1
     fa8:	2c f4       	brge	.+10     	; 0xfb4 <MDIO_SetPinDirection+0x46>
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	71 f0       	breq	.+28     	; 0xfce <MDIO_SetPinDirection+0x60>
     fb2:	cb c0       	rjmp	.+406    	; 0x114a <MDIO_SetPinDirection+0x1dc>
     fb4:	2c 81       	ldd	r18, Y+4	; 0x04
     fb6:	3d 81       	ldd	r19, Y+5	; 0x05
     fb8:	22 30       	cpi	r18, 0x02	; 2
     fba:	31 05       	cpc	r19, r1
     fbc:	09 f4       	brne	.+2      	; 0xfc0 <MDIO_SetPinDirection+0x52>
     fbe:	67 c0       	rjmp	.+206    	; 0x108e <MDIO_SetPinDirection+0x120>
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	83 30       	cpi	r24, 0x03	; 3
     fc6:	91 05       	cpc	r25, r1
     fc8:	09 f4       	brne	.+2      	; 0xfcc <MDIO_SetPinDirection+0x5e>
     fca:	91 c0       	rjmp	.+290    	; 0x10ee <MDIO_SetPinDirection+0x180>
     fcc:	be c0       	rjmp	.+380    	; 0x114a <MDIO_SetPinDirection+0x1dc>
		{
		case MDIO_PORTA:
			if (Copy_u8PinDir==PIN_OUTPUT)
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	a1 f4       	brne	.+40     	; 0xffc <MDIO_SetPinDirection+0x8e>
			{
				SET_BIT(DDRA,Copy_u8PinNo);
     fd4:	aa e3       	ldi	r26, 0x3A	; 58
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ea e3       	ldi	r30, 0x3A	; 58
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	48 2f       	mov	r20, r24
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	28 2f       	mov	r18, r24
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	02 2e       	mov	r0, r18
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <MDIO_SetPinDirection+0x84>
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	0a 94       	dec	r0
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <MDIO_SetPinDirection+0x80>
     ff6:	84 2b       	or	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	a7 c0       	rjmp	.+334    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	88 23       	and	r24, r24
    1000:	09 f0       	breq	.+2      	; 0x1004 <MDIO_SetPinDirection+0x96>
    1002:	a3 c0       	rjmp	.+326    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRA,Copy_u8PinNo);
    1004:	aa e3       	ldi	r26, 0x3A	; 58
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ea e3       	ldi	r30, 0x3A	; 58
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <MDIO_SetPinDirection+0xb4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <MDIO_SetPinDirection+0xb0>
    1026:	80 95       	com	r24
    1028:	84 23       	and	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	8e c0       	rjmp	.+284    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				/*wrong pin direction*/
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8PinDir==PIN_OUTPUT)
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	81 30       	cpi	r24, 0x01	; 1
    1032:	a1 f4       	brne	.+40     	; 0x105c <MDIO_SetPinDirection+0xee>
			{
				SET_BIT(DDRB,Copy_u8PinNo);
    1034:	a7 e3       	ldi	r26, 0x37	; 55
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e7 e3       	ldi	r30, 0x37	; 55
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	02 2e       	mov	r0, r18
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <MDIO_SetPinDirection+0xe4>
    104e:	88 0f       	add	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	0a 94       	dec	r0
    1054:	e2 f7       	brpl	.-8      	; 0x104e <MDIO_SetPinDirection+0xe0>
    1056:	84 2b       	or	r24, r20
    1058:	8c 93       	st	X, r24
    105a:	77 c0       	rjmp	.+238    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	88 23       	and	r24, r24
    1060:	09 f0       	breq	.+2      	; 0x1064 <MDIO_SetPinDirection+0xf6>
    1062:	73 c0       	rjmp	.+230    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRB,Copy_u8PinNo);
    1064:	a7 e3       	ldi	r26, 0x37	; 55
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	e7 e3       	ldi	r30, 0x37	; 55
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	48 2f       	mov	r20, r24
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	28 2f       	mov	r18, r24
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 2e       	mov	r0, r18
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <MDIO_SetPinDirection+0x114>
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	0a 94       	dec	r0
    1084:	e2 f7       	brpl	.-8      	; 0x107e <MDIO_SetPinDirection+0x110>
    1086:	80 95       	com	r24
    1088:	84 23       	and	r24, r20
    108a:	8c 93       	st	X, r24
    108c:	5e c0       	rjmp	.+188    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				/*wrong pin direction*/
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8PinDir==PIN_OUTPUT)
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	81 30       	cpi	r24, 0x01	; 1
    1092:	a1 f4       	brne	.+40     	; 0x10bc <MDIO_SetPinDirection+0x14e>
			{
				SET_BIT(DDRC,Copy_u8PinNo);
    1094:	a4 e3       	ldi	r26, 0x34	; 52
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <MDIO_SetPinDirection+0x144>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <MDIO_SetPinDirection+0x140>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	47 c0       	rjmp	.+142    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	88 23       	and	r24, r24
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <MDIO_SetPinDirection+0x156>
    10c2:	43 c0       	rjmp	.+134    	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRC,Copy_u8PinNo);
    10c4:	a4 e3       	ldi	r26, 0x34	; 52
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	e4 e3       	ldi	r30, 0x34	; 52
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	48 2f       	mov	r20, r24
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	02 2e       	mov	r0, r18
    10dc:	02 c0       	rjmp	.+4      	; 0x10e2 <MDIO_SetPinDirection+0x174>
    10de:	88 0f       	add	r24, r24
    10e0:	99 1f       	adc	r25, r25
    10e2:	0a 94       	dec	r0
    10e4:	e2 f7       	brpl	.-8      	; 0x10de <MDIO_SetPinDirection+0x170>
    10e6:	80 95       	com	r24
    10e8:	84 23       	and	r24, r20
    10ea:	8c 93       	st	X, r24
    10ec:	2e c0       	rjmp	.+92     	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				/*wrong pin direction*/
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8PinDir==PIN_OUTPUT)
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	81 30       	cpi	r24, 0x01	; 1
    10f2:	a1 f4       	brne	.+40     	; 0x111c <MDIO_SetPinDirection+0x1ae>
			{
				SET_BIT(DDRD,Copy_u8PinNo);
    10f4:	a1 e3       	ldi	r26, 0x31	; 49
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e1 e3       	ldi	r30, 0x31	; 49
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	89 81       	ldd	r24, Y+1	; 0x01
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <MDIO_SetPinDirection+0x1a4>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <MDIO_SetPinDirection+0x1a0>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	17 c0       	rjmp	.+46     	; 0x114a <MDIO_SetPinDirection+0x1dc>
			}
			else if (Copy_u8PinDir==PIN_INPUT)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	88 23       	and	r24, r24
    1120:	a1 f4       	brne	.+40     	; 0x114a <MDIO_SetPinDirection+0x1dc>
			{
				CLR_BIT(DDRD,Copy_u8PinNo);
    1122:	a1 e3       	ldi	r26, 0x31	; 49
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	e1 e3       	ldi	r30, 0x31	; 49
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	48 2f       	mov	r20, r24
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	02 2e       	mov	r0, r18
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <MDIO_SetPinDirection+0x1d2>
    113c:	88 0f       	add	r24, r24
    113e:	99 1f       	adc	r25, r25
    1140:	0a 94       	dec	r0
    1142:	e2 f7       	brpl	.-8      	; 0x113c <MDIO_SetPinDirection+0x1ce>
    1144:	80 95       	com	r24
    1146:	84 23       	and	r24, r20
    1148:	8c 93       	st	X, r24
	else
	{
		/*Wrong Pin number*/
	}

}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <MDIO_SetPortValue>:
void MDIO_SetPortValue(u8 Copy_u8PortNo,u8 Copy_u8PortValue)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	00 d0       	rcall	.+0      	; 0x1160 <MDIO_SetPortValue+0x6>
    1160:	00 d0       	rcall	.+0      	; 0x1162 <MDIO_SetPortValue+0x8>
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PortValue==PORT_HIGH)||(Copy_u8PortValue==PORT_LOW))
    116a:	8a 81       	ldd	r24, Y+2	; 0x02
    116c:	8f 3f       	cpi	r24, 0xFF	; 255
    116e:	19 f0       	breq	.+6      	; 0x1176 <MDIO_SetPortValue+0x1c>
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	88 23       	and	r24, r24
    1174:	91 f5       	brne	.+100    	; 0x11da <MDIO_SetPortValue+0x80>
	{
		switch (Copy_u8PortNo)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3c 83       	std	Y+4, r19	; 0x04
    117e:	2b 83       	std	Y+3, r18	; 0x03
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	81 30       	cpi	r24, 0x01	; 1
    1186:	91 05       	cpc	r25, r1
    1188:	d1 f0       	breq	.+52     	; 0x11be <MDIO_SetPortValue+0x64>
    118a:	2b 81       	ldd	r18, Y+3	; 0x03
    118c:	3c 81       	ldd	r19, Y+4	; 0x04
    118e:	22 30       	cpi	r18, 0x02	; 2
    1190:	31 05       	cpc	r19, r1
    1192:	2c f4       	brge	.+10     	; 0x119e <MDIO_SetPortValue+0x44>
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	9c 81       	ldd	r25, Y+4	; 0x04
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	61 f0       	breq	.+24     	; 0x11b4 <MDIO_SetPortValue+0x5a>
    119c:	1e c0       	rjmp	.+60     	; 0x11da <MDIO_SetPortValue+0x80>
    119e:	2b 81       	ldd	r18, Y+3	; 0x03
    11a0:	3c 81       	ldd	r19, Y+4	; 0x04
    11a2:	22 30       	cpi	r18, 0x02	; 2
    11a4:	31 05       	cpc	r19, r1
    11a6:	81 f0       	breq	.+32     	; 0x11c8 <MDIO_SetPortValue+0x6e>
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	9c 81       	ldd	r25, Y+4	; 0x04
    11ac:	83 30       	cpi	r24, 0x03	; 3
    11ae:	91 05       	cpc	r25, r1
    11b0:	81 f0       	breq	.+32     	; 0x11d2 <MDIO_SetPortValue+0x78>
    11b2:	13 c0       	rjmp	.+38     	; 0x11da <MDIO_SetPortValue+0x80>
		{
		/*Valid port direction given */
		case MDIO_PORTA:
			PORTA = Copy_u8PortValue;
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	80 83       	st	Z, r24
    11bc:	0e c0       	rjmp	.+28     	; 0x11da <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTB:
			PORTB = Copy_u8PortValue;
    11be:	e8 e3       	ldi	r30, 0x38	; 56
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	80 83       	st	Z, r24
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTC:
			PORTC = Copy_u8PortValue;
    11c8:	e5 e3       	ldi	r30, 0x35	; 53
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	80 83       	st	Z, r24
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <MDIO_SetPortValue+0x80>
			break;
		case MDIO_PORTD:
			PORTC = Copy_u8PortValue;
    11d2:	e5 e3       	ldi	r30, 0x35	; 53
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 83       	st	Z, r24
	}
	else
	{
		/*Invalid port value given*/
	}
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <MDIO_SetPinValue>:
void MDIO_SetPinValue(u8 Copy_u8PinNo , u8 Copy_u8PortNo , u8 Copy_u8Pinvalue)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <MDIO_SetPinValue+0x6>
    11ee:	00 d0       	rcall	.+0      	; 0x11f0 <MDIO_SetPinValue+0x8>
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	89 83       	std	Y+1, r24	; 0x01
    11f8:	6a 83       	std	Y+2, r22	; 0x02
    11fa:	4b 83       	std	Y+3, r20	; 0x03

	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
    11fe:	88 30       	cpi	r24, 0x08	; 8
    1200:	08 f0       	brcs	.+2      	; 0x1204 <MDIO_SetPinValue+0x1c>
    1202:	e0 c0       	rjmp	.+448    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
	{
		switch (Copy_u8PortNo)
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3d 83       	std	Y+5, r19	; 0x05
    120c:	2c 83       	std	Y+4, r18	; 0x04
    120e:	8c 81       	ldd	r24, Y+4	; 0x04
    1210:	9d 81       	ldd	r25, Y+5	; 0x05
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	91 05       	cpc	r25, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <MDIO_SetPinValue+0x32>
    1218:	47 c0       	rjmp	.+142    	; 0x12a8 <MDIO_SetPinValue+0xc0>
    121a:	2c 81       	ldd	r18, Y+4	; 0x04
    121c:	3d 81       	ldd	r19, Y+5	; 0x05
    121e:	22 30       	cpi	r18, 0x02	; 2
    1220:	31 05       	cpc	r19, r1
    1222:	2c f4       	brge	.+10     	; 0x122e <MDIO_SetPinValue+0x46>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	71 f0       	breq	.+28     	; 0x1248 <MDIO_SetPinValue+0x60>
    122c:	cb c0       	rjmp	.+406    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	3d 81       	ldd	r19, Y+5	; 0x05
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	09 f4       	brne	.+2      	; 0x123a <MDIO_SetPinValue+0x52>
    1238:	67 c0       	rjmp	.+206    	; 0x1308 <MDIO_SetPinValue+0x120>
    123a:	8c 81       	ldd	r24, Y+4	; 0x04
    123c:	9d 81       	ldd	r25, Y+5	; 0x05
    123e:	83 30       	cpi	r24, 0x03	; 3
    1240:	91 05       	cpc	r25, r1
    1242:	09 f4       	brne	.+2      	; 0x1246 <MDIO_SetPinValue+0x5e>
    1244:	91 c0       	rjmp	.+290    	; 0x1368 <MDIO_SetPinValue+0x180>
    1246:	be c0       	rjmp	.+380    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
		{
		case MDIO_PORTA:
			if (Copy_u8Pinvalue==PIN_HIGH)
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	81 30       	cpi	r24, 0x01	; 1
    124c:	a1 f4       	brne	.+40     	; 0x1276 <MDIO_SetPinValue+0x8e>
			{
				SET_BIT(PORTA,Copy_u8PinNo);
    124e:	ab e3       	ldi	r26, 0x3B	; 59
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	eb e3       	ldi	r30, 0x3B	; 59
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <MDIO_SetPinValue+0x84>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <MDIO_SetPinValue+0x80>
    1270:	84 2b       	or	r24, r20
    1272:	8c 93       	st	X, r24
    1274:	a7 c0       	rjmp	.+334    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	88 23       	and	r24, r24
    127a:	09 f0       	breq	.+2      	; 0x127e <MDIO_SetPinValue+0x96>
    127c:	a3 c0       	rjmp	.+326    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTA,Copy_u8PinNo);
    127e:	ab e3       	ldi	r26, 0x3B	; 59
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	eb e3       	ldi	r30, 0x3B	; 59
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	89 81       	ldd	r24, Y+1	; 0x01
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <MDIO_SetPinValue+0xb4>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <MDIO_SetPinValue+0xb0>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	8e c0       	rjmp	.+284    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				/*wrong pin VALUE*/
			}
			break;
		case MDIO_PORTB:
			if (Copy_u8Pinvalue==PIN_HIGH)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	a1 f4       	brne	.+40     	; 0x12d6 <MDIO_SetPinValue+0xee>
			{
				SET_BIT(PORTB,Copy_u8PinNo);
    12ae:	a8 e3       	ldi	r26, 0x38	; 56
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e8 e3       	ldi	r30, 0x38	; 56
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	89 81       	ldd	r24, Y+1	; 0x01
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <MDIO_SetPinValue+0xe4>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <MDIO_SetPinValue+0xe0>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	77 c0       	rjmp	.+238    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	88 23       	and	r24, r24
    12da:	09 f0       	breq	.+2      	; 0x12de <MDIO_SetPinValue+0xf6>
    12dc:	73 c0       	rjmp	.+230    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTB,Copy_u8PinNo);
    12de:	a8 e3       	ldi	r26, 0x38	; 56
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e8 e3       	ldi	r30, 0x38	; 56
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <MDIO_SetPinValue+0x114>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <MDIO_SetPinValue+0x110>
    1300:	80 95       	com	r24
    1302:	84 23       	and	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	5e c0       	rjmp	.+188    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				/*wrong pin VALUE*/
			}
			break;
		case MDIO_PORTC:
			if (Copy_u8Pinvalue==PIN_HIGH)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	a1 f4       	brne	.+40     	; 0x1336 <MDIO_SetPinValue+0x14e>
			{
				SET_BIT(PORTC,Copy_u8PinNo);
    130e:	a5 e3       	ldi	r26, 0x35	; 53
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e5 e3       	ldi	r30, 0x35	; 53
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	89 81       	ldd	r24, Y+1	; 0x01
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <MDIO_SetPinValue+0x144>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <MDIO_SetPinValue+0x140>
    1330:	84 2b       	or	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	47 c0       	rjmp	.+142    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	88 23       	and	r24, r24
    133a:	09 f0       	breq	.+2      	; 0x133e <MDIO_SetPinValue+0x156>
    133c:	43 c0       	rjmp	.+134    	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTC,Copy_u8PinNo);
    133e:	a5 e3       	ldi	r26, 0x35	; 53
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	e5 e3       	ldi	r30, 0x35	; 53
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	48 2f       	mov	r20, r24
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	28 2f       	mov	r18, r24
    134e:	30 e0       	ldi	r19, 0x00	; 0
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	02 2e       	mov	r0, r18
    1356:	02 c0       	rjmp	.+4      	; 0x135c <MDIO_SetPinValue+0x174>
    1358:	88 0f       	add	r24, r24
    135a:	99 1f       	adc	r25, r25
    135c:	0a 94       	dec	r0
    135e:	e2 f7       	brpl	.-8      	; 0x1358 <MDIO_SetPinValue+0x170>
    1360:	80 95       	com	r24
    1362:	84 23       	and	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	2e c0       	rjmp	.+92     	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				/*wrong pin VALUE*/
			}
			break;
		case MDIO_PORTD:
			if (Copy_u8Pinvalue==PIN_HIGH)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	a1 f4       	brne	.+40     	; 0x1396 <MDIO_SetPinValue+0x1ae>
			{
				SET_BIT(PORTD,Copy_u8PinNo);
    136e:	a2 e3       	ldi	r26, 0x32	; 50
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	e2 e3       	ldi	r30, 0x32	; 50
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	48 2f       	mov	r20, r24
    137a:	89 81       	ldd	r24, Y+1	; 0x01
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	02 2e       	mov	r0, r18
    1386:	02 c0       	rjmp	.+4      	; 0x138c <MDIO_SetPinValue+0x1a4>
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	0a 94       	dec	r0
    138e:	e2 f7       	brpl	.-8      	; 0x1388 <MDIO_SetPinValue+0x1a0>
    1390:	84 2b       	or	r24, r20
    1392:	8c 93       	st	X, r24
    1394:	17 c0       	rjmp	.+46     	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			}
			else if (Copy_u8Pinvalue==PIN_LOW)
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	88 23       	and	r24, r24
    139a:	a1 f4       	brne	.+40     	; 0x13c4 <MDIO_SetPinValue+0x1dc>
			{
				CLR_BIT(PORTD,Copy_u8PinNo);
    139c:	a2 e3       	ldi	r26, 0x32	; 50
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e2 e3       	ldi	r30, 0x32	; 50
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	48 2f       	mov	r20, r24
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <MDIO_SetPinValue+0x1d2>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <MDIO_SetPinValue+0x1ce>
    13be:	80 95       	com	r24
    13c0:	84 23       	and	r24, r20
    13c2:	8c 93       	st	X, r24
	else
	{
		/*Wrong Pin number*/
	}

}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <MDIO_ReadPort>:
void MDIO_ReadPort(u8 Copy_u8PortNo, u8* P_u8PortReading)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	00 d0       	rcall	.+0      	; 0x13da <MDIO_ReadPort+0x6>
    13da:	00 d0       	rcall	.+0      	; 0x13dc <MDIO_ReadPort+0x8>
    13dc:	0f 92       	push	r0
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	7b 83       	std	Y+3, r23	; 0x03
    13e6:	6a 83       	std	Y+2, r22	; 0x02
	if (P_u8PortReading!=NULL)
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	9b 81       	ldd	r25, Y+3	; 0x03
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	d1 f1       	breq	.+116    	; 0x1464 <MDIO_ReadPort+0x90>
	{
		switch(Copy_u8PortNo)
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	3d 83       	std	Y+5, r19	; 0x05
    13f8:	2c 83       	std	Y+4, r18	; 0x04
    13fa:	8c 81       	ldd	r24, Y+4	; 0x04
    13fc:	9d 81       	ldd	r25, Y+5	; 0x05
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	91 05       	cpc	r25, r1
    1402:	e1 f0       	breq	.+56     	; 0x143c <MDIO_ReadPort+0x68>
    1404:	2c 81       	ldd	r18, Y+4	; 0x04
    1406:	3d 81       	ldd	r19, Y+5	; 0x05
    1408:	22 30       	cpi	r18, 0x02	; 2
    140a:	31 05       	cpc	r19, r1
    140c:	2c f4       	brge	.+10     	; 0x1418 <MDIO_ReadPort+0x44>
    140e:	8c 81       	ldd	r24, Y+4	; 0x04
    1410:	9d 81       	ldd	r25, Y+5	; 0x05
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	61 f0       	breq	.+24     	; 0x142e <MDIO_ReadPort+0x5a>
    1416:	26 c0       	rjmp	.+76     	; 0x1464 <MDIO_ReadPort+0x90>
    1418:	2c 81       	ldd	r18, Y+4	; 0x04
    141a:	3d 81       	ldd	r19, Y+5	; 0x05
    141c:	22 30       	cpi	r18, 0x02	; 2
    141e:	31 05       	cpc	r19, r1
    1420:	a1 f0       	breq	.+40     	; 0x144a <MDIO_ReadPort+0x76>
    1422:	8c 81       	ldd	r24, Y+4	; 0x04
    1424:	9d 81       	ldd	r25, Y+5	; 0x05
    1426:	83 30       	cpi	r24, 0x03	; 3
    1428:	91 05       	cpc	r25, r1
    142a:	b1 f0       	breq	.+44     	; 0x1458 <MDIO_ReadPort+0x84>
    142c:	1b c0       	rjmp	.+54     	; 0x1464 <MDIO_ReadPort+0x90>
		{
		case MDIO_PORTA:
			*P_u8PortReading = PINA;
    142e:	e9 e3       	ldi	r30, 0x39	; 57
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	ea 81       	ldd	r30, Y+2	; 0x02
    1436:	fb 81       	ldd	r31, Y+3	; 0x03
    1438:	80 83       	st	Z, r24
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTB:
			*P_u8PortReading = PINB;
    143c:	e6 e3       	ldi	r30, 0x36	; 54
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	80 83       	st	Z, r24
    1448:	0d c0       	rjmp	.+26     	; 0x1464 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTC:
			*P_u8PortReading = PINC;
    144a:	e3 e3       	ldi	r30, 0x33	; 51
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	ea 81       	ldd	r30, Y+2	; 0x02
    1452:	fb 81       	ldd	r31, Y+3	; 0x03
    1454:	80 83       	st	Z, r24
    1456:	06 c0       	rjmp	.+12     	; 0x1464 <MDIO_ReadPort+0x90>
			break;
		case MDIO_PORTD:
			*P_u8PortReading = PIND;
    1458:	e0 e3       	ldi	r30, 0x30	; 48
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	ea 81       	ldd	r30, Y+2	; 0x02
    1460:	fb 81       	ldd	r31, Y+3	; 0x03
    1462:	80 83       	st	Z, r24
	}
	else
	{
		/*NULL pointer*/
	}
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <MDIO_ReadPin>:
void MDIO_ReadPin(u8 Copy_u8PinNo, u8 Copy_u8PortNo, u8* P_u8PortReading)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	00 d0       	rcall	.+0      	; 0x147a <MDIO_ReadPin+0x6>
    147a:	00 d0       	rcall	.+0      	; 0x147c <MDIO_ReadPin+0x8>
    147c:	00 d0       	rcall	.+0      	; 0x147e <MDIO_ReadPin+0xa>
    147e:	cd b7       	in	r28, 0x3d	; 61
    1480:	de b7       	in	r29, 0x3e	; 62
    1482:	89 83       	std	Y+1, r24	; 0x01
    1484:	6a 83       	std	Y+2, r22	; 0x02
    1486:	5c 83       	std	Y+4, r21	; 0x04
    1488:	4b 83       	std	Y+3, r20	; 0x03
	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	08 f0       	brcs	.+2      	; 0x1492 <MDIO_ReadPin+0x1e>
    1490:	70 c0       	rjmp	.+224    	; 0x1572 <MDIO_ReadPin+0xfe>
	{
		switch (Copy_u8PortNo)
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	28 2f       	mov	r18, r24
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	3e 83       	std	Y+6, r19	; 0x06
    149a:	2d 83       	std	Y+5, r18	; 0x05
    149c:	4d 81       	ldd	r20, Y+5	; 0x05
    149e:	5e 81       	ldd	r21, Y+6	; 0x06
    14a0:	41 30       	cpi	r20, 0x01	; 1
    14a2:	51 05       	cpc	r21, r1
    14a4:	59 f1       	breq	.+86     	; 0x14fc <MDIO_ReadPin+0x88>
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	9e 81       	ldd	r25, Y+6	; 0x06
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	91 05       	cpc	r25, r1
    14ae:	34 f4       	brge	.+12     	; 0x14bc <MDIO_ReadPin+0x48>
    14b0:	2d 81       	ldd	r18, Y+5	; 0x05
    14b2:	3e 81       	ldd	r19, Y+6	; 0x06
    14b4:	21 15       	cp	r18, r1
    14b6:	31 05       	cpc	r19, r1
    14b8:	69 f0       	breq	.+26     	; 0x14d4 <MDIO_ReadPin+0x60>
    14ba:	5b c0       	rjmp	.+182    	; 0x1572 <MDIO_ReadPin+0xfe>
    14bc:	4d 81       	ldd	r20, Y+5	; 0x05
    14be:	5e 81       	ldd	r21, Y+6	; 0x06
    14c0:	42 30       	cpi	r20, 0x02	; 2
    14c2:	51 05       	cpc	r21, r1
    14c4:	79 f1       	breq	.+94     	; 0x1524 <MDIO_ReadPin+0xb0>
    14c6:	8d 81       	ldd	r24, Y+5	; 0x05
    14c8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <MDIO_ReadPin+0x5e>
    14d0:	3d c0       	rjmp	.+122    	; 0x154c <MDIO_ReadPin+0xd8>
    14d2:	4f c0       	rjmp	.+158    	; 0x1572 <MDIO_ReadPin+0xfe>
		{
		case MDIO_PORTA:
			* P_u8PortReading = GET_BIT(PINA,Copy_u8PinNo);
    14d4:	e9 e3       	ldi	r30, 0x39	; 57
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	a9 01       	movw	r20, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <MDIO_ReadPin+0x78>
    14e8:	55 95       	asr	r21
    14ea:	47 95       	ror	r20
    14ec:	8a 95       	dec	r24
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <MDIO_ReadPin+0x74>
    14f0:	ca 01       	movw	r24, r20
    14f2:	81 70       	andi	r24, 0x01	; 1
    14f4:	eb 81       	ldd	r30, Y+3	; 0x03
    14f6:	fc 81       	ldd	r31, Y+4	; 0x04
    14f8:	80 83       	st	Z, r24
    14fa:	3b c0       	rjmp	.+118    	; 0x1572 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTB:
			* P_u8PortReading = GET_BIT(PINB,Copy_u8PinNo);
    14fc:	e6 e3       	ldi	r30, 0x36	; 54
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <MDIO_ReadPin+0xa0>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <MDIO_ReadPin+0x9c>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	eb 81       	ldd	r30, Y+3	; 0x03
    151e:	fc 81       	ldd	r31, Y+4	; 0x04
    1520:	80 83       	st	Z, r24
    1522:	27 c0       	rjmp	.+78     	; 0x1572 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTC:
			* P_u8PortReading = GET_BIT(PINC,Copy_u8PinNo);
    1524:	e3 e3       	ldi	r30, 0x33	; 51
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <MDIO_ReadPin+0xc8>
    1538:	55 95       	asr	r21
    153a:	47 95       	ror	r20
    153c:	8a 95       	dec	r24
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <MDIO_ReadPin+0xc4>
    1540:	ca 01       	movw	r24, r20
    1542:	81 70       	andi	r24, 0x01	; 1
    1544:	eb 81       	ldd	r30, Y+3	; 0x03
    1546:	fc 81       	ldd	r31, Y+4	; 0x04
    1548:	80 83       	st	Z, r24
    154a:	13 c0       	rjmp	.+38     	; 0x1572 <MDIO_ReadPin+0xfe>
			break;
		case MDIO_PORTD:
			* P_u8PortReading = GET_BIT(PIND,Copy_u8PinNo);
    154c:	e0 e3       	ldi	r30, 0x30	; 48
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <MDIO_ReadPin+0xf0>
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <MDIO_ReadPin+0xec>
    1568:	ca 01       	movw	r24, r20
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	eb 81       	ldd	r30, Y+3	; 0x03
    156e:	fc 81       	ldd	r31, Y+4	; 0x04
    1570:	80 83       	st	Z, r24
	else
	{
		/*Wrong Pin number*/
	}

}
    1572:	26 96       	adiw	r28, 0x06	; 6
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <MDIO_TogglePin>:
void MDIO_TogglePin(u8 Copy_u8PinNo, u8 Copy_u8PortNo)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <MDIO_TogglePin+0x6>
    158a:	00 d0       	rcall	.+0      	; 0x158c <MDIO_TogglePin+0x8>
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8PinNo>=0)&&(Copy_u8PinNo<8))
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 30       	cpi	r24, 0x08	; 8
    1598:	08 f0       	brcs	.+2      	; 0x159c <MDIO_TogglePin+0x18>
    159a:	6e c0       	rjmp	.+220    	; 0x1678 <MDIO_TogglePin+0xf4>
	{
		switch (Copy_u8PortNo)
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	28 2f       	mov	r18, r24
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	3c 83       	std	Y+4, r19	; 0x04
    15a4:	2b 83       	std	Y+3, r18	; 0x03
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	91 05       	cpc	r25, r1
    15ae:	49 f1       	breq	.+82     	; 0x1602 <MDIO_TogglePin+0x7e>
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	2c f4       	brge	.+10     	; 0x15c4 <MDIO_TogglePin+0x40>
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	61 f0       	breq	.+24     	; 0x15da <MDIO_TogglePin+0x56>
    15c2:	5a c0       	rjmp	.+180    	; 0x1678 <MDIO_TogglePin+0xf4>
    15c4:	2b 81       	ldd	r18, Y+3	; 0x03
    15c6:	3c 81       	ldd	r19, Y+4	; 0x04
    15c8:	22 30       	cpi	r18, 0x02	; 2
    15ca:	31 05       	cpc	r19, r1
    15cc:	71 f1       	breq	.+92     	; 0x162a <MDIO_TogglePin+0xa6>
    15ce:	8b 81       	ldd	r24, Y+3	; 0x03
    15d0:	9c 81       	ldd	r25, Y+4	; 0x04
    15d2:	83 30       	cpi	r24, 0x03	; 3
    15d4:	91 05       	cpc	r25, r1
    15d6:	e9 f1       	breq	.+122    	; 0x1652 <MDIO_TogglePin+0xce>
    15d8:	4f c0       	rjmp	.+158    	; 0x1678 <MDIO_TogglePin+0xf4>
		{
		case MDIO_PORTA:
			TOGGLE_BIT(PORTA,Copy_u8PinNo);
    15da:	ab e3       	ldi	r26, 0x3B	; 59
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	eb e3       	ldi	r30, 0x3B	; 59
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <MDIO_TogglePin+0x74>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <MDIO_TogglePin+0x70>
    15fc:	84 27       	eor	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	3b c0       	rjmp	.+118    	; 0x1678 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTB:
			TOGGLE_BIT(PORTB,Copy_u8PinNo);
    1602:	a8 e3       	ldi	r26, 0x38	; 56
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e8 e3       	ldi	r30, 0x38	; 56
    1608:	f0 e0       	ldi	r31, 0x00	; 0
    160a:	80 81       	ld	r24, Z
    160c:	48 2f       	mov	r20, r24
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	02 2e       	mov	r0, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <MDIO_TogglePin+0x9c>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	0a 94       	dec	r0
    1622:	e2 f7       	brpl	.-8      	; 0x161c <MDIO_TogglePin+0x98>
    1624:	84 27       	eor	r24, r20
    1626:	8c 93       	st	X, r24
    1628:	27 c0       	rjmp	.+78     	; 0x1678 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTC:
			TOGGLE_BIT(PORTC,Copy_u8PinNo);
    162a:	a5 e3       	ldi	r26, 0x35	; 53
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <MDIO_TogglePin+0xc4>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <MDIO_TogglePin+0xc0>
    164c:	84 27       	eor	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	13 c0       	rjmp	.+38     	; 0x1678 <MDIO_TogglePin+0xf4>
			break;
		case MDIO_PORTD:
			TOGGLE_BIT(PORTD,Copy_u8PinNo);
    1652:	a2 e3       	ldi	r26, 0x32	; 50
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e2 e3       	ldi	r30, 0x32	; 50
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <MDIO_TogglePin+0xec>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <MDIO_TogglePin+0xe8>
    1674:	84 27       	eor	r24, r20
    1676:	8c 93       	st	X, r24
	}
	else
	{
		/*Wrong Pin number*/
	}
}
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	cf 91       	pop	r28
    1682:	df 91       	pop	r29
    1684:	08 95       	ret

00001686 <MDIO_SetNibbleValue>:
void MDIO_SetNibbleValue(u8 Copy_u8PinStart, u8 Copy_u8PortNumber, u8 Copy_u8Value)
{
    1686:	df 93       	push	r29
    1688:	cf 93       	push	r28
    168a:	00 d0       	rcall	.+0      	; 0x168c <MDIO_SetNibbleValue+0x6>
    168c:	00 d0       	rcall	.+0      	; 0x168e <MDIO_SetNibbleValue+0x8>
    168e:	00 d0       	rcall	.+0      	; 0x1690 <MDIO_SetNibbleValue+0xa>
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	8a 83       	std	Y+2, r24	; 0x02
    1696:	6b 83       	std	Y+3, r22	; 0x03
    1698:	4c 83       	std	Y+4, r20	; 0x04
	u8 Loc_u8Value = 0;
    169a:	19 82       	std	Y+1, r1	; 0x01
	Loc_u8Value = Copy_u8Value;
    169c:	8c 81       	ldd	r24, Y+4	; 0x04
    169e:	89 83       	std	Y+1, r24	; 0x01

	// Handling of the Value
	Loc_u8Value = ((Loc_u8Value & (0x0F)) << Copy_u8PinStart);
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	88 2f       	mov	r24, r24
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	9c 01       	movw	r18, r24
    16a8:	2f 70       	andi	r18, 0x0F	; 15
    16aa:	30 70       	andi	r19, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	a9 01       	movw	r20, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <MDIO_SetNibbleValue+0x34>
    16b6:	44 0f       	add	r20, r20
    16b8:	55 1f       	adc	r21, r21
    16ba:	8a 95       	dec	r24
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <MDIO_SetNibbleValue+0x30>
    16be:	ca 01       	movw	r24, r20
    16c0:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8PinStart<=4) && (Copy_u8PinStart>=0))
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	85 30       	cpi	r24, 0x05	; 5
    16c6:	08 f0       	brcs	.+2      	; 0x16ca <MDIO_SetNibbleValue+0x44>
    16c8:	95 c0       	rjmp	.+298    	; 0x17f4 <MDIO_SetNibbleValue+0x16e>
	{
		switch (Copy_u8PortNumber)
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	3e 83       	std	Y+6, r19	; 0x06
    16d2:	2d 83       	std	Y+5, r18	; 0x05
    16d4:	4d 81       	ldd	r20, Y+5	; 0x05
    16d6:	5e 81       	ldd	r21, Y+6	; 0x06
    16d8:	41 30       	cpi	r20, 0x01	; 1
    16da:	51 05       	cpc	r21, r1
    16dc:	a9 f1       	breq	.+106    	; 0x1748 <MDIO_SetNibbleValue+0xc2>
    16de:	8d 81       	ldd	r24, Y+5	; 0x05
    16e0:	9e 81       	ldd	r25, Y+6	; 0x06
    16e2:	82 30       	cpi	r24, 0x02	; 2
    16e4:	91 05       	cpc	r25, r1
    16e6:	34 f4       	brge	.+12     	; 0x16f4 <MDIO_SetNibbleValue+0x6e>
    16e8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ea:	3e 81       	ldd	r19, Y+6	; 0x06
    16ec:	21 15       	cp	r18, r1
    16ee:	31 05       	cpc	r19, r1
    16f0:	71 f0       	breq	.+28     	; 0x170e <MDIO_SetNibbleValue+0x88>
    16f2:	80 c0       	rjmp	.+256    	; 0x17f4 <MDIO_SetNibbleValue+0x16e>
    16f4:	4d 81       	ldd	r20, Y+5	; 0x05
    16f6:	5e 81       	ldd	r21, Y+6	; 0x06
    16f8:	42 30       	cpi	r20, 0x02	; 2
    16fa:	51 05       	cpc	r21, r1
    16fc:	09 f4       	brne	.+2      	; 0x1700 <MDIO_SetNibbleValue+0x7a>
    16fe:	41 c0       	rjmp	.+130    	; 0x1782 <MDIO_SetNibbleValue+0xfc>
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	83 30       	cpi	r24, 0x03	; 3
    1706:	91 05       	cpc	r25, r1
    1708:	09 f4       	brne	.+2      	; 0x170c <MDIO_SetNibbleValue+0x86>
    170a:	58 c0       	rjmp	.+176    	; 0x17bc <MDIO_SetNibbleValue+0x136>
    170c:	73 c0       	rjmp	.+230    	; 0x17f4 <MDIO_SetNibbleValue+0x16e>
		{
		case MDIO_PORTA :
			// Mask Port A
			PORTA &= (~((0X0F)<<Copy_u8PinStart));
    170e:	ab e3       	ldi	r26, 0x3B	; 59
    1710:	b0 e0       	ldi	r27, 0x00	; 0
    1712:	eb e3       	ldi	r30, 0x3B	; 59
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	80 81       	ld	r24, Z
    1718:	48 2f       	mov	r20, r24
    171a:	8a 81       	ldd	r24, Y+2	; 0x02
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	8f e0       	ldi	r24, 0x0F	; 15
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <MDIO_SetNibbleValue+0xa6>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <MDIO_SetNibbleValue+0xa2>
    1730:	80 95       	com	r24
    1732:	84 23       	and	r24, r20
    1734:	8c 93       	st	X, r24
			PORTA |= Loc_u8Value ;
    1736:	ab e3       	ldi	r26, 0x3B	; 59
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	eb e3       	ldi	r30, 0x3B	; 59
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	90 81       	ld	r25, Z
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	89 2b       	or	r24, r25
    1744:	8c 93       	st	X, r24
    1746:	56 c0       	rjmp	.+172    	; 0x17f4 <MDIO_SetNibbleValue+0x16e>
			break;
		case MDIO_PORTB :
			// Mask Port B
			PORTB &= (~((0X0F)<<Copy_u8PinStart));
    1748:	a8 e3       	ldi	r26, 0x38	; 56
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e8 e3       	ldi	r30, 0x38	; 56
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	48 2f       	mov	r20, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	28 2f       	mov	r18, r24
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	8f e0       	ldi	r24, 0x0F	; 15
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <MDIO_SetNibbleValue+0xe0>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <MDIO_SetNibbleValue+0xdc>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
			PORTB |= Loc_u8Value ;
    1770:	a8 e3       	ldi	r26, 0x38	; 56
    1772:	b0 e0       	ldi	r27, 0x00	; 0
    1774:	e8 e3       	ldi	r30, 0x38	; 56
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	90 81       	ld	r25, Z
    177a:	89 81       	ldd	r24, Y+1	; 0x01
    177c:	89 2b       	or	r24, r25
    177e:	8c 93       	st	X, r24
    1780:	39 c0       	rjmp	.+114    	; 0x17f4 <MDIO_SetNibbleValue+0x16e>
			break;
		case MDIO_PORTC :
			// Mask Port C
			PORTC &= (~((0X0F)<<Copy_u8PinStart));
    1782:	a5 e3       	ldi	r26, 0x35	; 53
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e5 e3       	ldi	r30, 0x35	; 53
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	8f e0       	ldi	r24, 0x0F	; 15
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <MDIO_SetNibbleValue+0x11a>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <MDIO_SetNibbleValue+0x116>
    17a4:	80 95       	com	r24
    17a6:	84 23       	and	r24, r20
    17a8:	8c 93       	st	X, r24
			PORTC |= Loc_u8Value ;
    17aa:	a5 e3       	ldi	r26, 0x35	; 53
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e5 e3       	ldi	r30, 0x35	; 53
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	90 81       	ld	r25, Z
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	89 2b       	or	r24, r25
    17b8:	8c 93       	st	X, r24
    17ba:	1c c0       	rjmp	.+56     	; 0x17f4 <MDIO_SetNibbleValue+0x16e>
			break;
		case MDIO_PORTD :
			// Mask Port D
			PORTD &= (~((0X0F)<<Copy_u8PinStart));
    17bc:	a2 e3       	ldi	r26, 0x32	; 50
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e2 e3       	ldi	r30, 0x32	; 50
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8f e0       	ldi	r24, 0x0F	; 15
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <MDIO_SetNibbleValue+0x154>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <MDIO_SetNibbleValue+0x150>
    17de:	80 95       	com	r24
    17e0:	84 23       	and	r24, r20
    17e2:	8c 93       	st	X, r24
			PORTD |= Loc_u8Value ;
    17e4:	a2 e3       	ldi	r26, 0x32	; 50
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e2 e3       	ldi	r30, 0x32	; 50
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	90 81       	ld	r25, Z
    17ee:	89 81       	ldd	r24, Y+1	; 0x01
    17f0:	89 2b       	or	r24, r25
    17f2:	8c 93       	st	X, r24
	}
	else
	{
		//wrong pin start
	}
}
    17f4:	26 96       	adiw	r28, 0x06	; 6
    17f6:	0f b6       	in	r0, 0x3f	; 63
    17f8:	f8 94       	cli
    17fa:	de bf       	out	0x3e, r29	; 62
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <MADC_Init>:
 * 3- Poll on ADIF
 * 4- Return ADC value
 * */

void MADC_Init(void)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
	//Set Vreference
#if MADC_SET_VREF == VREF_AREF_PIN
	CLR_BIT(ADMUX,6);
	CLR_BIT(ADMUX,7);
#elif MADC_SET_VREF == VREF_AVCC_PIN
	SET_BIT(ADMUX,6);
    180e:	a7 e2       	ldi	r26, 0x27	; 39
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e7 e2       	ldi	r30, 0x27	; 39
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	80 64       	ori	r24, 0x40	; 64
    181a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
    181c:	a7 e2       	ldi	r26, 0x27	; 39
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e7 e2       	ldi	r30, 0x27	; 39
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	8f 77       	andi	r24, 0x7F	; 127
    1828:	8c 93       	st	X, r24
#elif MADC_SET_RESCALER == PRESCALER_DIVIDER_BY_8
	SET_BIT(ADCSRA,0);
	SET_BIT(ADCSRA,1);
	CLR_BIT(ADCSRA,2);
#elif MADC_SET_RESCALER == PRESCALER_DIVIDER_BY_16
	CLR_BIT(ADCSRA,0);
    182a:	a6 e2       	ldi	r26, 0x26	; 38
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e6 e2       	ldi	r30, 0x26	; 38
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8e 7f       	andi	r24, 0xFE	; 254
    1836:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA,1);
    1838:	a6 e2       	ldi	r26, 0x26	; 38
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e6 e2       	ldi	r30, 0x26	; 38
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8d 7f       	andi	r24, 0xFD	; 253
    1844:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,2);
    1846:	a6 e2       	ldi	r26, 0x26	; 38
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e6 e2       	ldi	r30, 0x26	; 38
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	84 60       	ori	r24, 0x04	; 4
    1852:	8c 93       	st	X, r24
#else
#error "wrong prescaler chosen"
#endif
	// Left/right adjust
#if MDCA_SET_ADJUST_LEVEL == MADC_RIGHT_ADJUST
	CLR_BIT(ADMUX,5);
    1854:	a7 e2       	ldi	r26, 0x27	; 39
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e2       	ldi	r30, 0x27	; 39
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 7d       	andi	r24, 0xDF	; 223
    1860:	8c 93       	st	X, r24
#elif MDCA_SET_ADJUST_LEVEL == MADC_LEFT_ADJUST
	SET_BIT(ADMUS,5);
#endif

}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <MADC_StartConversion>:

u16 MADC_StartConversion(u8 Copy_u8ADC_Channel)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <MADC_StartConversion+0x6>
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	8a 83       	std	Y+2, r24	; 0x02
	// Set Channel
	u8 Loc_u8ADC_Channel = Copy_u8ADC_Channel & MADC_CHANNEL_INPUT_MUSK ;
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	8f 71       	andi	r24, 0x1F	; 31
    1878:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= MADC_ADMUX_REG_MUSK ;
    187a:	a7 e2       	ldi	r26, 0x27	; 39
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e7 e2       	ldi	r30, 0x27	; 39
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 7e       	andi	r24, 0xE0	; 224
    1886:	8c 93       	st	X, r24
	ADMUX |= Loc_u8ADC_Channel ;
    1888:	a7 e2       	ldi	r26, 0x27	; 39
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	e7 e2       	ldi	r30, 0x27	; 39
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	90 81       	ld	r25, Z
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	89 2b       	or	r24, r25
    1896:	8c 93       	st	X, r24
	// Start Conversion
	SET_BIT(ADCSRA,6);
    1898:	a6 e2       	ldi	r26, 0x26	; 38
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e6 e2       	ldi	r30, 0x26	; 38
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	80 64       	ori	r24, 0x40	; 64
    18a4:	8c 93       	st	X, r24
	//Poll on the flag
	while (GET_BIT(ADCSRA,4)==0)
    18a6:	e6 e2       	ldi	r30, 0x26	; 38
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	82 95       	swap	r24
    18ae:	8f 70       	andi	r24, 0x0F	; 15
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	90 70       	andi	r25, 0x00	; 0
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	a9 f3       	breq	.-22     	; 0x18a6 <MADC_StartConversion+0x3e>
	{
		//Convesrion processing
	}
	// Conversion finished
	return ADC;
    18bc:	e4 e2       	ldi	r30, 0x24	; 36
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	91 81       	ldd	r25, Z+1	; 0x01
}
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <HSEVEN_SEG_Init>:
#include "../../LIB/STD_Type.h"
#include "../../MCAL/MDIO/MDIO_Interface.h"
#include "HSEVEN_SEG_Interface.h"

void HSEVEN_SEG_Init(SevenSeg_t * Ptr_SevenSegObj)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <HSEVEN_SEG_Init+0x6>
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
    18d8:	9a 83       	std	Y+2, r25	; 0x02
    18da:	89 83       	std	Y+1, r24	; 0x01
	// Set Pins Output
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinEn,Ptr_SevenSegObj->PinEnPort, PIN_OUTPUT);
    18dc:	e9 81       	ldd	r30, Y+1	; 0x01
    18de:	fa 81       	ldd	r31, Y+2	; 0x02
    18e0:	81 81       	ldd	r24, Z+1	; 0x01
    18e2:	e9 81       	ldd	r30, Y+1	; 0x01
    18e4:	fa 81       	ldd	r31, Y+2	; 0x02
    18e6:	90 81       	ld	r25, Z
    18e8:	69 2f       	mov	r22, r25
    18ea:	41 e0       	ldi	r20, 0x01	; 1
    18ec:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinA,Ptr_SevenSegObj->PinAPort, PIN_OUTPUT);
    18f0:	e9 81       	ldd	r30, Y+1	; 0x01
    18f2:	fa 81       	ldd	r31, Y+2	; 0x02
    18f4:	83 81       	ldd	r24, Z+3	; 0x03
    18f6:	e9 81       	ldd	r30, Y+1	; 0x01
    18f8:	fa 81       	ldd	r31, Y+2	; 0x02
    18fa:	92 81       	ldd	r25, Z+2	; 0x02
    18fc:	69 2f       	mov	r22, r25
    18fe:	41 e0       	ldi	r20, 0x01	; 1
    1900:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinB,Ptr_SevenSegObj->PinBPort, PIN_OUTPUT);
    1904:	e9 81       	ldd	r30, Y+1	; 0x01
    1906:	fa 81       	ldd	r31, Y+2	; 0x02
    1908:	85 81       	ldd	r24, Z+5	; 0x05
    190a:	e9 81       	ldd	r30, Y+1	; 0x01
    190c:	fa 81       	ldd	r31, Y+2	; 0x02
    190e:	94 81       	ldd	r25, Z+4	; 0x04
    1910:	69 2f       	mov	r22, r25
    1912:	41 e0       	ldi	r20, 0x01	; 1
    1914:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinC,Ptr_SevenSegObj->PinCPort, PIN_OUTPUT);
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	fa 81       	ldd	r31, Y+2	; 0x02
    191c:	87 81       	ldd	r24, Z+7	; 0x07
    191e:	e9 81       	ldd	r30, Y+1	; 0x01
    1920:	fa 81       	ldd	r31, Y+2	; 0x02
    1922:	96 81       	ldd	r25, Z+6	; 0x06
    1924:	69 2f       	mov	r22, r25
    1926:	41 e0       	ldi	r20, 0x01	; 1
    1928:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(Ptr_SevenSegObj->PinD,Ptr_SevenSegObj->PinDPort, PIN_OUTPUT);
    192c:	e9 81       	ldd	r30, Y+1	; 0x01
    192e:	fa 81       	ldd	r31, Y+2	; 0x02
    1930:	81 85       	ldd	r24, Z+9	; 0x09
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	90 85       	ldd	r25, Z+8	; 0x08
    1938:	69 2f       	mov	r22, r25
    193a:	41 e0       	ldi	r20, 0x01	; 1
    193c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <HSEVEN_SEG_SetMode>:

void HSEVEN_SEG_SetMode(SevenSeg_t * Ptr_SevenSegObj, u8 Copy_u8SevenSegMode )
{
    194a:	df 93       	push	r29
    194c:	cf 93       	push	r28
    194e:	00 d0       	rcall	.+0      	; 0x1950 <HSEVEN_SEG_SetMode+0x6>
    1950:	0f 92       	push	r0
    1952:	cd b7       	in	r28, 0x3d	; 61
    1954:	de b7       	in	r29, 0x3e	; 62
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_u8SevenSegMode == SEVEN_SEG_ON )
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	81 30       	cpi	r24, 0x01	; 1
    1960:	59 f4       	brne	.+22     	; 0x1978 <HSEVEN_SEG_SetMode+0x2e>
	{
		MDIO_SetPinValue(Ptr_SevenSegObj->PinEn,Ptr_SevenSegObj->PinEnPort, PIN_HIGH);
    1962:	e9 81       	ldd	r30, Y+1	; 0x01
    1964:	fa 81       	ldd	r31, Y+2	; 0x02
    1966:	81 81       	ldd	r24, Z+1	; 0x01
    1968:	e9 81       	ldd	r30, Y+1	; 0x01
    196a:	fa 81       	ldd	r31, Y+2	; 0x02
    196c:	90 81       	ld	r25, Z
    196e:	69 2f       	mov	r22, r25
    1970:	41 e0       	ldi	r20, 0x01	; 1
    1972:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1976:	0d c0       	rjmp	.+26     	; 0x1992 <HSEVEN_SEG_SetMode+0x48>
	}
	else if (Copy_u8SevenSegMode == SEVEN_SEG_OFF)
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 23       	and	r24, r24
    197c:	51 f4       	brne	.+20     	; 0x1992 <HSEVEN_SEG_SetMode+0x48>
	{
		MDIO_SetPinValue(Ptr_SevenSegObj->PinEn,Ptr_SevenSegObj->PinEnPort, PIN_LOW);
    197e:	e9 81       	ldd	r30, Y+1	; 0x01
    1980:	fa 81       	ldd	r31, Y+2	; 0x02
    1982:	81 81       	ldd	r24, Z+1	; 0x01
    1984:	e9 81       	ldd	r30, Y+1	; 0x01
    1986:	fa 81       	ldd	r31, Y+2	; 0x02
    1988:	90 81       	ld	r25, Z
    198a:	69 2f       	mov	r22, r25
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	}
	else
	{
		// wrong mode ordered
	}
}
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <HSEVEN_SEG_Display>:

void HSEVEN_SEG_Display(SevenSeg_t * Ptr_SevenSegObj, u8 Copy_u8SevenSegValue)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <HSEVEN_SEG_Display+0x6>
    19a4:	00 d0       	rcall	.+0      	; 0x19a6 <HSEVEN_SEG_Display+0x8>
    19a6:	0f 92       	push	r0
    19a8:	cd b7       	in	r28, 0x3d	; 61
    19aa:	de b7       	in	r29, 0x3e	; 62
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	6b 83       	std	Y+3, r22	; 0x03
	if ((Copy_u8SevenSegValue>=0)&&(Copy_u8SevenSegValue<10))
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	8a 30       	cpi	r24, 0x0A	; 10
    19b6:	08 f0       	brcs	.+2      	; 0x19ba <HSEVEN_SEG_Display+0x1c>
    19b8:	eb c1       	rjmp	.+982    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
	{
		switch(Copy_u8SevenSegValue)
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3d 83       	std	Y+5, r19	; 0x05
    19c2:	2c 83       	std	Y+4, r18	; 0x04
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	84 30       	cpi	r24, 0x04	; 4
    19ca:	91 05       	cpc	r25, r1
    19cc:	09 f4       	brne	.+2      	; 0x19d0 <HSEVEN_SEG_Display+0x32>
    19ce:	eb c0       	rjmp	.+470    	; 0x1ba6 <HSEVEN_SEG_Display+0x208>
    19d0:	2c 81       	ldd	r18, Y+4	; 0x04
    19d2:	3d 81       	ldd	r19, Y+5	; 0x05
    19d4:	25 30       	cpi	r18, 0x05	; 5
    19d6:	31 05       	cpc	r19, r1
    19d8:	ec f4       	brge	.+58     	; 0x1a14 <HSEVEN_SEG_Display+0x76>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <HSEVEN_SEG_Display+0x48>
    19e4:	65 c0       	rjmp	.+202    	; 0x1ab0 <HSEVEN_SEG_Display+0x112>
    19e6:	2c 81       	ldd	r18, Y+4	; 0x04
    19e8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	2c f4       	brge	.+10     	; 0x19fa <HSEVEN_SEG_Display+0x5c>
    19f0:	8c 81       	ldd	r24, Y+4	; 0x04
    19f2:	9d 81       	ldd	r25, Y+5	; 0x05
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	99 f1       	breq	.+102    	; 0x1a5e <HSEVEN_SEG_Display+0xc0>
    19f8:	cb c1       	rjmp	.+918    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
    19fa:	2c 81       	ldd	r18, Y+4	; 0x04
    19fc:	3d 81       	ldd	r19, Y+5	; 0x05
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	09 f4       	brne	.+2      	; 0x1a06 <HSEVEN_SEG_Display+0x68>
    1a04:	7e c0       	rjmp	.+252    	; 0x1b02 <HSEVEN_SEG_Display+0x164>
    1a06:	8c 81       	ldd	r24, Y+4	; 0x04
    1a08:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0a:	83 30       	cpi	r24, 0x03	; 3
    1a0c:	91 05       	cpc	r25, r1
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <HSEVEN_SEG_Display+0x74>
    1a10:	a1 c0       	rjmp	.+322    	; 0x1b54 <HSEVEN_SEG_Display+0x1b6>
    1a12:	be c1       	rjmp	.+892    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	3d 81       	ldd	r19, Y+5	; 0x05
    1a18:	27 30       	cpi	r18, 0x07	; 7
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <HSEVEN_SEG_Display+0x82>
    1a1e:	3e c1       	rjmp	.+636    	; 0x1c9c <HSEVEN_SEG_Display+0x2fe>
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	88 30       	cpi	r24, 0x08	; 8
    1a26:	91 05       	cpc	r25, r1
    1a28:	6c f4       	brge	.+26     	; 0x1a44 <HSEVEN_SEG_Display+0xa6>
    1a2a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a2c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a2e:	25 30       	cpi	r18, 0x05	; 5
    1a30:	31 05       	cpc	r19, r1
    1a32:	09 f4       	brne	.+2      	; 0x1a36 <HSEVEN_SEG_Display+0x98>
    1a34:	e1 c0       	rjmp	.+450    	; 0x1bf8 <HSEVEN_SEG_Display+0x25a>
    1a36:	8c 81       	ldd	r24, Y+4	; 0x04
    1a38:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3a:	86 30       	cpi	r24, 0x06	; 6
    1a3c:	91 05       	cpc	r25, r1
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <HSEVEN_SEG_Display+0xa4>
    1a40:	04 c1       	rjmp	.+520    	; 0x1c4a <HSEVEN_SEG_Display+0x2ac>
    1a42:	a6 c1       	rjmp	.+844    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
    1a44:	2c 81       	ldd	r18, Y+4	; 0x04
    1a46:	3d 81       	ldd	r19, Y+5	; 0x05
    1a48:	28 30       	cpi	r18, 0x08	; 8
    1a4a:	31 05       	cpc	r19, r1
    1a4c:	09 f4       	brne	.+2      	; 0x1a50 <HSEVEN_SEG_Display+0xb2>
    1a4e:	4f c1       	rjmp	.+670    	; 0x1cee <HSEVEN_SEG_Display+0x350>
    1a50:	8c 81       	ldd	r24, Y+4	; 0x04
    1a52:	9d 81       	ldd	r25, Y+5	; 0x05
    1a54:	89 30       	cpi	r24, 0x09	; 9
    1a56:	91 05       	cpc	r25, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <HSEVEN_SEG_Display+0xbe>
    1a5a:	72 c1       	rjmp	.+740    	; 0x1d40 <HSEVEN_SEG_Display+0x3a2>
    1a5c:	99 c1       	rjmp	.+818    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
		{
		case 0:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_LOW);
    1a5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a60:	fa 81       	ldd	r31, Y+2	; 0x02
    1a62:	83 81       	ldd	r24, Z+3	; 0x03
    1a64:	e9 81       	ldd	r30, Y+1	; 0x01
    1a66:	fa 81       	ldd	r31, Y+2	; 0x02
    1a68:	92 81       	ldd	r25, Z+2	; 0x02
    1a6a:	69 2f       	mov	r22, r25
    1a6c:	40 e0       	ldi	r20, 0x00	; 0
    1a6e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_LOW);
    1a72:	e9 81       	ldd	r30, Y+1	; 0x01
    1a74:	fa 81       	ldd	r31, Y+2	; 0x02
    1a76:	85 81       	ldd	r24, Z+5	; 0x05
    1a78:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7c:	94 81       	ldd	r25, Z+4	; 0x04
    1a7e:	69 2f       	mov	r22, r25
    1a80:	40 e0       	ldi	r20, 0x00	; 0
    1a82:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_LOW);
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	87 81       	ldd	r24, Z+7	; 0x07
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	96 81       	ldd	r25, Z+6	; 0x06
    1a92:	69 2f       	mov	r22, r25
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1a9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9e:	81 85       	ldd	r24, Z+9	; 0x09
    1aa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa4:	90 85       	ldd	r25, Z+8	; 0x08
    1aa6:	69 2f       	mov	r22, r25
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1aae:	70 c1       	rjmp	.+736    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 1:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_HIGH);
    1ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ab4:	83 81       	ldd	r24, Z+3	; 0x03
    1ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aba:	92 81       	ldd	r25, Z+2	; 0x02
    1abc:	69 2f       	mov	r22, r25
    1abe:	41 e0       	ldi	r20, 0x01	; 1
    1ac0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_LOW);
    1ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac8:	85 81       	ldd	r24, Z+5	; 0x05
    1aca:	e9 81       	ldd	r30, Y+1	; 0x01
    1acc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ace:	94 81       	ldd	r25, Z+4	; 0x04
    1ad0:	69 2f       	mov	r22, r25
    1ad2:	40 e0       	ldi	r20, 0x00	; 0
    1ad4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_LOW);
    1ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    1ada:	fa 81       	ldd	r31, Y+2	; 0x02
    1adc:	87 81       	ldd	r24, Z+7	; 0x07
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	96 81       	ldd	r25, Z+6	; 0x06
    1ae4:	69 2f       	mov	r22, r25
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	81 85       	ldd	r24, Z+9	; 0x09
    1af2:	e9 81       	ldd	r30, Y+1	; 0x01
    1af4:	fa 81       	ldd	r31, Y+2	; 0x02
    1af6:	90 85       	ldd	r25, Z+8	; 0x08
    1af8:	69 2f       	mov	r22, r25
    1afa:	40 e0       	ldi	r20, 0x00	; 0
    1afc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1b00:	47 c1       	rjmp	.+654    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 2:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_LOW);
    1b02:	e9 81       	ldd	r30, Y+1	; 0x01
    1b04:	fa 81       	ldd	r31, Y+2	; 0x02
    1b06:	83 81       	ldd	r24, Z+3	; 0x03
    1b08:	e9 81       	ldd	r30, Y+1	; 0x01
    1b0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b0c:	92 81       	ldd	r25, Z+2	; 0x02
    1b0e:	69 2f       	mov	r22, r25
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_HIGH);
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	85 81       	ldd	r24, Z+5	; 0x05
    1b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b20:	94 81       	ldd	r25, Z+4	; 0x04
    1b22:	69 2f       	mov	r22, r25
    1b24:	41 e0       	ldi	r20, 0x01	; 1
    1b26:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_LOW);
    1b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2e:	87 81       	ldd	r24, Z+7	; 0x07
    1b30:	e9 81       	ldd	r30, Y+1	; 0x01
    1b32:	fa 81       	ldd	r31, Y+2	; 0x02
    1b34:	96 81       	ldd	r25, Z+6	; 0x06
    1b36:	69 2f       	mov	r22, r25
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1b3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b40:	fa 81       	ldd	r31, Y+2	; 0x02
    1b42:	81 85       	ldd	r24, Z+9	; 0x09
    1b44:	e9 81       	ldd	r30, Y+1	; 0x01
    1b46:	fa 81       	ldd	r31, Y+2	; 0x02
    1b48:	90 85       	ldd	r25, Z+8	; 0x08
    1b4a:	69 2f       	mov	r22, r25
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1b52:	1e c1       	rjmp	.+572    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 3:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_HIGH);
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	83 81       	ldd	r24, Z+3	; 0x03
    1b5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b5e:	92 81       	ldd	r25, Z+2	; 0x02
    1b60:	69 2f       	mov	r22, r25
    1b62:	41 e0       	ldi	r20, 0x01	; 1
    1b64:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_HIGH);
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	85 81       	ldd	r24, Z+5	; 0x05
    1b6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b70:	fa 81       	ldd	r31, Y+2	; 0x02
    1b72:	94 81       	ldd	r25, Z+4	; 0x04
    1b74:	69 2f       	mov	r22, r25
    1b76:	41 e0       	ldi	r20, 0x01	; 1
    1b78:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_LOW);
    1b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1b80:	87 81       	ldd	r24, Z+7	; 0x07
    1b82:	e9 81       	ldd	r30, Y+1	; 0x01
    1b84:	fa 81       	ldd	r31, Y+2	; 0x02
    1b86:	96 81       	ldd	r25, Z+6	; 0x06
    1b88:	69 2f       	mov	r22, r25
    1b8a:	40 e0       	ldi	r20, 0x00	; 0
    1b8c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1b90:	e9 81       	ldd	r30, Y+1	; 0x01
    1b92:	fa 81       	ldd	r31, Y+2	; 0x02
    1b94:	81 85       	ldd	r24, Z+9	; 0x09
    1b96:	e9 81       	ldd	r30, Y+1	; 0x01
    1b98:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9a:	90 85       	ldd	r25, Z+8	; 0x08
    1b9c:	69 2f       	mov	r22, r25
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1ba4:	f5 c0       	rjmp	.+490    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 4:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_LOW);
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	83 81       	ldd	r24, Z+3	; 0x03
    1bac:	e9 81       	ldd	r30, Y+1	; 0x01
    1bae:	fa 81       	ldd	r31, Y+2	; 0x02
    1bb0:	92 81       	ldd	r25, Z+2	; 0x02
    1bb2:	69 2f       	mov	r22, r25
    1bb4:	40 e0       	ldi	r20, 0x00	; 0
    1bb6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_LOW);
    1bba:	e9 81       	ldd	r30, Y+1	; 0x01
    1bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbe:	85 81       	ldd	r24, Z+5	; 0x05
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	94 81       	ldd	r25, Z+4	; 0x04
    1bc6:	69 2f       	mov	r22, r25
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_HIGH);
    1bce:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd2:	87 81       	ldd	r24, Z+7	; 0x07
    1bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd8:	96 81       	ldd	r25, Z+6	; 0x06
    1bda:	69 2f       	mov	r22, r25
    1bdc:	41 e0       	ldi	r20, 0x01	; 1
    1bde:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1be2:	e9 81       	ldd	r30, Y+1	; 0x01
    1be4:	fa 81       	ldd	r31, Y+2	; 0x02
    1be6:	81 85       	ldd	r24, Z+9	; 0x09
    1be8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bea:	fa 81       	ldd	r31, Y+2	; 0x02
    1bec:	90 85       	ldd	r25, Z+8	; 0x08
    1bee:	69 2f       	mov	r22, r25
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1bf6:	cc c0       	rjmp	.+408    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 5:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_HIGH);
    1bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfc:	83 81       	ldd	r24, Z+3	; 0x03
    1bfe:	e9 81       	ldd	r30, Y+1	; 0x01
    1c00:	fa 81       	ldd	r31, Y+2	; 0x02
    1c02:	92 81       	ldd	r25, Z+2	; 0x02
    1c04:	69 2f       	mov	r22, r25
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_LOW);
    1c0c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c0e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c10:	85 81       	ldd	r24, Z+5	; 0x05
    1c12:	e9 81       	ldd	r30, Y+1	; 0x01
    1c14:	fa 81       	ldd	r31, Y+2	; 0x02
    1c16:	94 81       	ldd	r25, Z+4	; 0x04
    1c18:	69 2f       	mov	r22, r25
    1c1a:	40 e0       	ldi	r20, 0x00	; 0
    1c1c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_HIGH);
    1c20:	e9 81       	ldd	r30, Y+1	; 0x01
    1c22:	fa 81       	ldd	r31, Y+2	; 0x02
    1c24:	87 81       	ldd	r24, Z+7	; 0x07
    1c26:	e9 81       	ldd	r30, Y+1	; 0x01
    1c28:	fa 81       	ldd	r31, Y+2	; 0x02
    1c2a:	96 81       	ldd	r25, Z+6	; 0x06
    1c2c:	69 2f       	mov	r22, r25
    1c2e:	41 e0       	ldi	r20, 0x01	; 1
    1c30:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1c34:	e9 81       	ldd	r30, Y+1	; 0x01
    1c36:	fa 81       	ldd	r31, Y+2	; 0x02
    1c38:	81 85       	ldd	r24, Z+9	; 0x09
    1c3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c3e:	90 85       	ldd	r25, Z+8	; 0x08
    1c40:	69 2f       	mov	r22, r25
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1c48:	a3 c0       	rjmp	.+326    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 6:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_LOW);
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	83 81       	ldd	r24, Z+3	; 0x03
    1c50:	e9 81       	ldd	r30, Y+1	; 0x01
    1c52:	fa 81       	ldd	r31, Y+2	; 0x02
    1c54:	92 81       	ldd	r25, Z+2	; 0x02
    1c56:	69 2f       	mov	r22, r25
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_HIGH);
    1c5e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c60:	fa 81       	ldd	r31, Y+2	; 0x02
    1c62:	85 81       	ldd	r24, Z+5	; 0x05
    1c64:	e9 81       	ldd	r30, Y+1	; 0x01
    1c66:	fa 81       	ldd	r31, Y+2	; 0x02
    1c68:	94 81       	ldd	r25, Z+4	; 0x04
    1c6a:	69 2f       	mov	r22, r25
    1c6c:	41 e0       	ldi	r20, 0x01	; 1
    1c6e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_HIGH);
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	87 81       	ldd	r24, Z+7	; 0x07
    1c78:	e9 81       	ldd	r30, Y+1	; 0x01
    1c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c7c:	96 81       	ldd	r25, Z+6	; 0x06
    1c7e:	69 2f       	mov	r22, r25
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1c86:	e9 81       	ldd	r30, Y+1	; 0x01
    1c88:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8a:	81 85       	ldd	r24, Z+9	; 0x09
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	90 85       	ldd	r25, Z+8	; 0x08
    1c92:	69 2f       	mov	r22, r25
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1c9a:	7a c0       	rjmp	.+244    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 7:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_HIGH);
    1c9c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c9e:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca0:	83 81       	ldd	r24, Z+3	; 0x03
    1ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca6:	92 81       	ldd	r25, Z+2	; 0x02
    1ca8:	69 2f       	mov	r22, r25
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_HIGH);
    1cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb4:	85 81       	ldd	r24, Z+5	; 0x05
    1cb6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cba:	94 81       	ldd	r25, Z+4	; 0x04
    1cbc:	69 2f       	mov	r22, r25
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_HIGH);
    1cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cc8:	87 81       	ldd	r24, Z+7	; 0x07
    1cca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cce:	96 81       	ldd	r25, Z+6	; 0x06
    1cd0:	69 2f       	mov	r22, r25
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_LOW);
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	81 85       	ldd	r24, Z+9	; 0x09
    1cde:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce2:	90 85       	ldd	r25, Z+8	; 0x08
    1ce4:	69 2f       	mov	r22, r25
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1cec:	51 c0       	rjmp	.+162    	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 8:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_LOW);
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	83 81       	ldd	r24, Z+3	; 0x03
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	92 81       	ldd	r25, Z+2	; 0x02
    1cfa:	69 2f       	mov	r22, r25
    1cfc:	40 e0       	ldi	r20, 0x00	; 0
    1cfe:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_LOW);
    1d02:	e9 81       	ldd	r30, Y+1	; 0x01
    1d04:	fa 81       	ldd	r31, Y+2	; 0x02
    1d06:	85 81       	ldd	r24, Z+5	; 0x05
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	94 81       	ldd	r25, Z+4	; 0x04
    1d0e:	69 2f       	mov	r22, r25
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_LOW);
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	87 81       	ldd	r24, Z+7	; 0x07
    1d1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d20:	96 81       	ldd	r25, Z+6	; 0x06
    1d22:	69 2f       	mov	r22, r25
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_HIGH);
    1d2a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d2c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d2e:	81 85       	ldd	r24, Z+9	; 0x09
    1d30:	e9 81       	ldd	r30, Y+1	; 0x01
    1d32:	fa 81       	ldd	r31, Y+2	; 0x02
    1d34:	90 85       	ldd	r25, Z+8	; 0x08
    1d36:	69 2f       	mov	r22, r25
    1d38:	41 e0       	ldi	r20, 0x01	; 1
    1d3a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    1d3e:	28 c0       	rjmp	.+80     	; 0x1d90 <HSEVEN_SEG_Display+0x3f2>
			break;
		case 9:
			MDIO_SetPinValue(Ptr_SevenSegObj->PinA , Ptr_SevenSegObj->PinAPort, PIN_HIGH);
    1d40:	e9 81       	ldd	r30, Y+1	; 0x01
    1d42:	fa 81       	ldd	r31, Y+2	; 0x02
    1d44:	83 81       	ldd	r24, Z+3	; 0x03
    1d46:	e9 81       	ldd	r30, Y+1	; 0x01
    1d48:	fa 81       	ldd	r31, Y+2	; 0x02
    1d4a:	92 81       	ldd	r25, Z+2	; 0x02
    1d4c:	69 2f       	mov	r22, r25
    1d4e:	41 e0       	ldi	r20, 0x01	; 1
    1d50:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinB , Ptr_SevenSegObj->PinBPort, PIN_LOW);
    1d54:	e9 81       	ldd	r30, Y+1	; 0x01
    1d56:	fa 81       	ldd	r31, Y+2	; 0x02
    1d58:	85 81       	ldd	r24, Z+5	; 0x05
    1d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    1d5e:	94 81       	ldd	r25, Z+4	; 0x04
    1d60:	69 2f       	mov	r22, r25
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinC , Ptr_SevenSegObj->PinCPort, PIN_LOW);
    1d68:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d6c:	87 81       	ldd	r24, Z+7	; 0x07
    1d6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d70:	fa 81       	ldd	r31, Y+2	; 0x02
    1d72:	96 81       	ldd	r25, Z+6	; 0x06
    1d74:	69 2f       	mov	r22, r25
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
			MDIO_SetPinValue(Ptr_SevenSegObj->PinD , Ptr_SevenSegObj->PinDPort, PIN_HIGH);
    1d7c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d7e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d80:	81 85       	ldd	r24, Z+9	; 0x09
    1d82:	e9 81       	ldd	r30, Y+1	; 0x01
    1d84:	fa 81       	ldd	r31, Y+2	; 0x02
    1d86:	90 85       	ldd	r25, Z+8	; 0x08
    1d88:	69 2f       	mov	r22, r25
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	}
	else
	{
		// wrong Display value passed
	}
}
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	08 95       	ret

00001da0 <HKPD_Init>:
//#include "../../HAL/HCLCD/HCLCD_Private.h"

u8 Cursor_Postion_LCD = 0;

void HKPD_Init()
{
    1da0:	df 93       	push	r29
    1da2:	cf 93       	push	r28
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
	/*Set pins directions*/

	// Set columns pin to be output
	MDIO_SetPinDirection(PIN0, HKPD_COLUMN_PORT, PIN_OUTPUT);
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	63 e0       	ldi	r22, 0x03	; 3
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN1, HKPD_COLUMN_PORT, PIN_OUTPUT);
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	63 e0       	ldi	r22, 0x03	; 3
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN4, HKPD_COLUMN_PORT, PIN_OUTPUT);
    1dbc:	84 e0       	ldi	r24, 0x04	; 4
    1dbe:	63 e0       	ldi	r22, 0x03	; 3
    1dc0:	41 e0       	ldi	r20, 0x01	; 1
    1dc2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN5, HKPD_COLUMN_PORT, PIN_OUTPUT);
    1dc6:	85 e0       	ldi	r24, 0x05	; 5
    1dc8:	63 e0       	ldi	r22, 0x03	; 3
    1dca:	41 e0       	ldi	r20, 0x01	; 1
    1dcc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>

	// Set rows pin to be output
	MDIO_SetPinDirection(PIN3, HKPD_ROW_PORT, PIN_INPUT);
    1dd0:	83 e0       	ldi	r24, 0x03	; 3
    1dd2:	62 e0       	ldi	r22, 0x02	; 2
    1dd4:	40 e0       	ldi	r20, 0x00	; 0
    1dd6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN4, HKPD_ROW_PORT, PIN_INPUT);
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	62 e0       	ldi	r22, 0x02	; 2
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN5, HKPD_ROW_PORT, PIN_INPUT);
    1de4:	85 e0       	ldi	r24, 0x05	; 5
    1de6:	62 e0       	ldi	r22, 0x02	; 2
    1de8:	40 e0       	ldi	r20, 0x00	; 0
    1dea:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(PIN6, HKPD_ROW_PORT, PIN_INPUT);
    1dee:	86 e0       	ldi	r24, 0x06	; 6
    1df0:	62 e0       	ldi	r22, 0x02	; 2
    1df2:	40 e0       	ldi	r20, 0x00	; 0
    1df4:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>

	/*Activate Pull up Resistor */
	MDIO_SetPinValue(PIN3,HKPD_ROW_PORT,PIN_HIGH);
    1df8:	83 e0       	ldi	r24, 0x03	; 3
    1dfa:	62 e0       	ldi	r22, 0x02	; 2
    1dfc:	41 e0       	ldi	r20, 0x01	; 1
    1dfe:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN4,HKPD_ROW_PORT,PIN_HIGH);
    1e02:	84 e0       	ldi	r24, 0x04	; 4
    1e04:	62 e0       	ldi	r22, 0x02	; 2
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN5,HKPD_ROW_PORT,PIN_HIGH);
    1e0c:	85 e0       	ldi	r24, 0x05	; 5
    1e0e:	62 e0       	ldi	r22, 0x02	; 2
    1e10:	41 e0       	ldi	r20, 0x01	; 1
    1e12:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN6,HKPD_ROW_PORT,PIN_HIGH);
    1e16:	86 e0       	ldi	r24, 0x06	; 6
    1e18:	62 e0       	ldi	r22, 0x02	; 2
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	/*Deactivate Columns */
	MDIO_SetPinValue(PIN0,HKPD_COLUMN_PORT,PIN_HIGH);
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	63 e0       	ldi	r22, 0x03	; 3
    1e24:	41 e0       	ldi	r20, 0x01	; 1
    1e26:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN1,HKPD_COLUMN_PORT,PIN_HIGH);
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	63 e0       	ldi	r22, 0x03	; 3
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN4,HKPD_COLUMN_PORT,PIN_HIGH);
    1e34:	84 e0       	ldi	r24, 0x04	; 4
    1e36:	63 e0       	ldi	r22, 0x03	; 3
    1e38:	41 e0       	ldi	r20, 0x01	; 1
    1e3a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
	MDIO_SetPinValue(PIN5,HKPD_COLUMN_PORT,PIN_HIGH);
    1e3e:	85 e0       	ldi	r24, 0x05	; 5
    1e40:	63 e0       	ldi	r22, 0x03	; 3
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

}
    1e48:	cf 91       	pop	r28
    1e4a:	df 91       	pop	r29
    1e4c:	08 95       	ret

00001e4e <HKPD_GetPressedButton>:

u8 HKPD_GetPressedButton()
{
    1e4e:	df 93       	push	r29
    1e50:	cf 93       	push	r28
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	6f 97       	sbiw	r28, 0x1f	; 31
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
	if (Cursor_Postion_LCD==16)
    1e62:	80 91 86 00 	lds	r24, 0x0086
    1e66:	80 31       	cpi	r24, 0x10	; 16
    1e68:	21 f4       	brne	.+8      	; 0x1e72 <HKPD_GetPressedButton+0x24>
	{
		HCLCD_SetCursorPosition4Bit(HCLCD_LINE1, 0);
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	0e 94 03 16 	call	0x2c06	; 0x2c06 <HCLCD_SetCursorPosition4Bit>
	}

	if (Cursor_Postion_LCD==33)
    1e72:	80 91 86 00 	lds	r24, 0x0086
    1e76:	81 32       	cpi	r24, 0x21	; 33
    1e78:	49 f4       	brne	.+18     	; 0x1e8c <HKPD_GetPressedButton+0x3e>
	{
		HCLCD_WriteCommand4Bit(DISPLAY_CLEAR);
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
		Cursor_Postion_LCD =0;
    1e80:	10 92 86 00 	sts	0x0086, r1
		HCLCD_SetCursorPosition4Bit(HCLCD_LINE0, 0);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	0e 94 03 16 	call	0x2c06	; 0x2c06 <HCLCD_SetCursorPosition4Bit>
	}
	u8 Loc_u8ColumnCounter=0;
    1e8c:	19 8a       	std	Y+17, r1	; 0x11
	u8 Loc_u8RowCounter=0;
    1e8e:	18 8a       	std	Y+16, r1	; 0x10

	u8 Loc_u8ReturnValue=HKPD_NOT_PRESSED;
    1e90:	8f ef       	ldi	r24, 0xFF	; 255
    1e92:	8f 87       	std	Y+15, r24	; 0x0f

	u8 Loc_u8PinState=0;
    1e94:	1a 8a       	std	Y+18, r1	; 0x12

	u8 Loc_u8PinArray [8] = { PIN0,PIN1,PIN4,PIN5,PIN3,PIN4,PIN5,PIN6};
    1e96:	ce 01       	movw	r24, r28
    1e98:	43 96       	adiw	r24, 0x13	; 19
    1e9a:	9c 8f       	std	Y+28, r25	; 0x1c
    1e9c:	8b 8f       	std	Y+27, r24	; 0x1b
    1e9e:	e8 e7       	ldi	r30, 0x78	; 120
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	fe 8f       	std	Y+30, r31	; 0x1e
    1ea4:	ed 8f       	std	Y+29, r30	; 0x1d
    1ea6:	f8 e0       	ldi	r31, 0x08	; 8
    1ea8:	ff 8f       	std	Y+31, r31	; 0x1f
    1eaa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1eac:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1eae:	00 80       	ld	r0, Z
    1eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb4:	01 96       	adiw	r24, 0x01	; 1
    1eb6:	9e 8f       	std	Y+30, r25	; 0x1e
    1eb8:	8d 8f       	std	Y+29, r24	; 0x1d
    1eba:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1ebc:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1ebe:	00 82       	st	Z, r0
    1ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	9c 8f       	std	Y+28, r25	; 0x1c
    1ec8:	8b 8f       	std	Y+27, r24	; 0x1b
    1eca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ecc:	91 50       	subi	r25, 0x01	; 1
    1ece:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed0:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1ed2:	ee 23       	and	r30, r30
    1ed4:	51 f7       	brne	.-44     	; 0x1eaa <HKPD_GetPressedButton+0x5c>

	for (Loc_u8ColumnCounter=HKPD_COL_START;Loc_u8ColumnCounter<HKPD_COL_END;Loc_u8ColumnCounter++)
    1ed6:	19 8a       	std	Y+17, r1	; 0x11
    1ed8:	db c0       	rjmp	.+438    	; 0x2090 <HKPD_GetPressedButton+0x242>
	{
	//Activate the column
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_LOW);
    1eda:	89 89       	ldd	r24, Y+17	; 0x11
    1edc:	28 2f       	mov	r18, r24
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	43 96       	adiw	r24, 0x13	; 19
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e2 0f       	add	r30, r18
    1ee8:	f3 1f       	adc	r31, r19
    1eea:	80 81       	ld	r24, Z
    1eec:	63 e0       	ldi	r22, 0x03	; 3
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

		for(Loc_u8RowCounter=HKPD_ROW_START;Loc_u8RowCounter<HKPD_ROW_END;Loc_u8RowCounter++)
    1ef4:	84 e0       	ldi	r24, 0x04	; 4
    1ef6:	88 8b       	std	Y+16, r24	; 0x10
    1ef8:	b7 c0       	rjmp	.+366    	; 0x2068 <HKPD_GetPressedButton+0x21a>
		{
			MDIO_ReadPin(Loc_u8PinArray[Loc_u8RowCounter],HKPD_ROW_PORT,&Loc_u8PinState);
    1efa:	88 89       	ldd	r24, Y+16	; 0x10
    1efc:	28 2f       	mov	r18, r24
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	ce 01       	movw	r24, r28
    1f02:	43 96       	adiw	r24, 0x13	; 19
    1f04:	fc 01       	movw	r30, r24
    1f06:	e2 0f       	add	r30, r18
    1f08:	f3 1f       	adc	r31, r19
    1f0a:	80 81       	ld	r24, Z
    1f0c:	9e 01       	movw	r18, r28
    1f0e:	2e 5e       	subi	r18, 0xEE	; 238
    1f10:	3f 4f       	sbci	r19, 0xFF	; 255
    1f12:	62 e0       	ldi	r22, 0x02	; 2
    1f14:	a9 01       	movw	r20, r18
    1f16:	0e 94 3a 0a 	call	0x1474	; 0x1474 <MDIO_ReadPin>

			if(Loc_u8PinState==0)
    1f1a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <HKPD_GetPressedButton+0xd4>
    1f20:	a0 c0       	rjmp	.+320    	; 0x2062 <HKPD_GetPressedButton+0x214>
			{
				// Retrieve the Key Value
				Loc_u8ReturnValue=HKPD_SwitchValues[Loc_u8ColumnCounter-HKPD_COL_START][Loc_u8RowCounter-HKPD_ROW_START];
    1f22:	89 89       	ldd	r24, Y+17	; 0x11
    1f24:	48 2f       	mov	r20, r24
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	88 89       	ldd	r24, Y+16	; 0x10
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 01       	movw	r18, r24
    1f30:	24 50       	subi	r18, 0x04	; 4
    1f32:	30 40       	sbci	r19, 0x00	; 0
    1f34:	ca 01       	movw	r24, r20
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	82 0f       	add	r24, r18
    1f40:	93 1f       	adc	r25, r19
    1f42:	fc 01       	movw	r30, r24
    1f44:	e8 59       	subi	r30, 0x98	; 152
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 87       	std	Y+15, r24	; 0x0f
				Cursor_Postion_LCD++;
    1f4c:	80 91 86 00 	lds	r24, 0x0086
    1f50:	8f 5f       	subi	r24, 0xFF	; 255
    1f52:	80 93 86 00 	sts	0x0086, r24
    1f56:	10 c0       	rjmp	.+32     	; 0x1f78 <HKPD_GetPressedButton+0x12a>

				while(Loc_u8PinState==0)
				{
					MDIO_ReadPin(Loc_u8PinArray[Loc_u8RowCounter],HKPD_ROW_PORT,&Loc_u8PinState);
    1f58:	88 89       	ldd	r24, Y+16	; 0x10
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	ce 01       	movw	r24, r28
    1f60:	43 96       	adiw	r24, 0x13	; 19
    1f62:	fc 01       	movw	r30, r24
    1f64:	e2 0f       	add	r30, r18
    1f66:	f3 1f       	adc	r31, r19
    1f68:	80 81       	ld	r24, Z
    1f6a:	9e 01       	movw	r18, r28
    1f6c:	2e 5e       	subi	r18, 0xEE	; 238
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	62 e0       	ldi	r22, 0x02	; 2
    1f72:	a9 01       	movw	r20, r18
    1f74:	0e 94 3a 0a 	call	0x1474	; 0x1474 <MDIO_ReadPin>
			{
				// Retrieve the Key Value
				Loc_u8ReturnValue=HKPD_SwitchValues[Loc_u8ColumnCounter-HKPD_COL_START][Loc_u8RowCounter-HKPD_ROW_START];
				Cursor_Postion_LCD++;

				while(Loc_u8PinState==0)
    1f78:	8a 89       	ldd	r24, Y+18	; 0x12
    1f7a:	88 23       	and	r24, r24
    1f7c:	69 f3       	breq	.-38     	; 0x1f58 <HKPD_GetPressedButton+0x10a>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e2       	ldi	r26, 0x20	; 32
    1f84:	b1 e4       	ldi	r27, 0x41	; 65
    1f86:	8b 87       	std	Y+11, r24	; 0x0b
    1f88:	9c 87       	std	Y+12, r25	; 0x0c
    1f8a:	ad 87       	std	Y+13, r26	; 0x0d
    1f8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f90:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f92:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f94:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	4a e7       	ldi	r20, 0x7A	; 122
    1f9c:	55 e4       	ldi	r21, 0x45	; 69
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8f 83       	std	Y+7, r24	; 0x07
    1fa8:	98 87       	std	Y+8, r25	; 0x08
    1faa:	a9 87       	std	Y+9, r26	; 0x09
    1fac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	2c f4       	brge	.+10     	; 0x1fd0 <HKPD_GetPressedButton+0x182>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9e 83       	std	Y+6, r25	; 0x06
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <HKPD_GetPressedButton+0x200>
	else if (__tmp > 65535)
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	3f ef       	ldi	r19, 0xFF	; 255
    1fdc:	4f e7       	ldi	r20, 0x7F	; 127
    1fde:	57 e4       	ldi	r21, 0x47	; 71
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fe4:	18 16       	cp	r1, r24
    1fe6:	4c f5       	brge	.+82     	; 0x203a <HKPD_GetPressedButton+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fe8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fea:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fec:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fee:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e2       	ldi	r20, 0x20	; 32
    1ff6:	51 e4       	ldi	r21, 0x41	; 65
    1ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	bc 01       	movw	r22, r24
    2002:	cd 01       	movw	r24, r26
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9e 83       	std	Y+6, r25	; 0x06
    200e:	8d 83       	std	Y+5, r24	; 0x05
    2010:	0f c0       	rjmp	.+30     	; 0x2030 <HKPD_GetPressedButton+0x1e2>
    2012:	80 e9       	ldi	r24, 0x90	; 144
    2014:	91 e0       	ldi	r25, 0x01	; 1
    2016:	9c 83       	std	Y+4, r25	; 0x04
    2018:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	f1 f7       	brne	.-4      	; 0x201e <HKPD_GetPressedButton+0x1d0>
    2022:	9c 83       	std	Y+4, r25	; 0x04
    2024:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	9e 83       	std	Y+6, r25	; 0x06
    202e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	00 97       	sbiw	r24, 0x00	; 0
    2036:	69 f7       	brne	.-38     	; 0x2012 <HKPD_GetPressedButton+0x1c4>
    2038:	14 c0       	rjmp	.+40     	; 0x2062 <HKPD_GetPressedButton+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    203a:	6f 81       	ldd	r22, Y+7	; 0x07
    203c:	78 85       	ldd	r23, Y+8	; 0x08
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	9e 83       	std	Y+6, r25	; 0x06
    204c:	8d 83       	std	Y+5, r24	; 0x05
    204e:	8d 81       	ldd	r24, Y+5	; 0x05
    2050:	9e 81       	ldd	r25, Y+6	; 0x06
    2052:	9a 83       	std	Y+2, r25	; 0x02
    2054:	89 83       	std	Y+1, r24	; 0x01
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	9a 81       	ldd	r25, Y+2	; 0x02
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <HKPD_GetPressedButton+0x20c>
    205e:	9a 83       	std	Y+2, r25	; 0x02
    2060:	89 83       	std	Y+1, r24	; 0x01
	for (Loc_u8ColumnCounter=HKPD_COL_START;Loc_u8ColumnCounter<HKPD_COL_END;Loc_u8ColumnCounter++)
	{
	//Activate the column
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_LOW);

		for(Loc_u8RowCounter=HKPD_ROW_START;Loc_u8RowCounter<HKPD_ROW_END;Loc_u8RowCounter++)
    2062:	88 89       	ldd	r24, Y+16	; 0x10
    2064:	8f 5f       	subi	r24, 0xFF	; 255
    2066:	88 8b       	std	Y+16, r24	; 0x10
    2068:	88 89       	ldd	r24, Y+16	; 0x10
    206a:	88 30       	cpi	r24, 0x08	; 8
    206c:	08 f4       	brcc	.+2      	; 0x2070 <HKPD_GetPressedButton+0x222>
    206e:	45 cf       	rjmp	.-374    	; 0x1efa <HKPD_GetPressedButton+0xac>
			}

		}

		//Deactivate Column
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_HIGH);
    2070:	89 89       	ldd	r24, Y+17	; 0x11
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	ce 01       	movw	r24, r28
    2078:	43 96       	adiw	r24, 0x13	; 19
    207a:	fc 01       	movw	r30, r24
    207c:	e2 0f       	add	r30, r18
    207e:	f3 1f       	adc	r31, r19
    2080:	80 81       	ld	r24, Z
    2082:	63 e0       	ldi	r22, 0x03	; 3
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	u8 Loc_u8PinState=0;

	u8 Loc_u8PinArray [8] = { PIN0,PIN1,PIN4,PIN5,PIN3,PIN4,PIN5,PIN6};

	for (Loc_u8ColumnCounter=HKPD_COL_START;Loc_u8ColumnCounter<HKPD_COL_END;Loc_u8ColumnCounter++)
    208a:	89 89       	ldd	r24, Y+17	; 0x11
    208c:	8f 5f       	subi	r24, 0xFF	; 255
    208e:	89 8b       	std	Y+17, r24	; 0x11
    2090:	89 89       	ldd	r24, Y+17	; 0x11
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	08 f4       	brcc	.+2      	; 0x2098 <HKPD_GetPressedButton+0x24a>
    2096:	21 cf       	rjmp	.-446    	; 0x1eda <HKPD_GetPressedButton+0x8c>
		}

		//Deactivate Column
		MDIO_SetPinValue(Loc_u8PinArray[Loc_u8ColumnCounter],HKPD_COLUMN_PORT,PIN_HIGH);
	}
	return Loc_u8ReturnValue;
    2098:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    209a:	6f 96       	adiw	r28, 0x1f	; 31
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <HCLCD_WriteCommand4Bit>:
#include "HCLCD_Interface.h"
#include <util/delay.h>
#include "HCLCD_Confag.h"
#include "HCLCD_Private.h"
void HCLCD_WriteCommand4Bit(u8 Copy_u8Comman)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
    20b4:	6d 97       	sbiw	r28, 0x1d	; 29
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set RW to Zero
	MDIO_SetPinValue(RW,CONTROL_PORT, PIN_LOW);
    20c2:	82 e0       	ldi	r24, 0x02	; 2
    20c4:	61 e0       	ldi	r22, 0x01	; 1
    20c6:	40 e0       	ldi	r20, 0x00	; 0
    20c8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	// Set RS to Zero ==> to indicate a command
	MDIO_SetPinValue(RS,CONTROL_PORT, PIN_LOW);
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	61 e0       	ldi	r22, 0x01	; 1
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	//Set High Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Comman>>4 );
    20d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20d8:	98 2f       	mov	r25, r24
    20da:	92 95       	swap	r25
    20dc:	9f 70       	andi	r25, 0x0F	; 15
    20de:	84 e0       	ldi	r24, 0x04	; 4
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	49 2f       	mov	r20, r25
    20e4:	0e 94 43 0b 	call	0x1686	; 0x1686 <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	a0 e0       	ldi	r26, 0x00	; 0
    20f8:	b0 e4       	ldi	r27, 0x40	; 64
    20fa:	89 8f       	std	Y+25, r24	; 0x19
    20fc:	9a 8f       	std	Y+26, r25	; 0x1a
    20fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2100:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2102:	69 8d       	ldd	r22, Y+25	; 0x19
    2104:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2106:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2108:	9c 8d       	ldd	r25, Y+28	; 0x1c
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	4a e7       	ldi	r20, 0x7A	; 122
    2110:	55 e4       	ldi	r21, 0x45	; 69
    2112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8d 8b       	std	Y+21, r24	; 0x15
    211c:	9e 8b       	std	Y+22, r25	; 0x16
    211e:	af 8b       	std	Y+23, r26	; 0x17
    2120:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2122:	6d 89       	ldd	r22, Y+21	; 0x15
    2124:	7e 89       	ldd	r23, Y+22	; 0x16
    2126:	8f 89       	ldd	r24, Y+23	; 0x17
    2128:	98 8d       	ldd	r25, Y+24	; 0x18
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e8       	ldi	r20, 0x80	; 128
    2130:	5f e3       	ldi	r21, 0x3F	; 63
    2132:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2136:	88 23       	and	r24, r24
    2138:	2c f4       	brge	.+10     	; 0x2144 <HCLCD_WriteCommand4Bit+0x98>
		__ticks = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	9c 8b       	std	Y+20, r25	; 0x14
    2140:	8b 8b       	std	Y+19, r24	; 0x13
    2142:	3f c0       	rjmp	.+126    	; 0x21c2 <HCLCD_WriteCommand4Bit+0x116>
	else if (__tmp > 65535)
    2144:	6d 89       	ldd	r22, Y+21	; 0x15
    2146:	7e 89       	ldd	r23, Y+22	; 0x16
    2148:	8f 89       	ldd	r24, Y+23	; 0x17
    214a:	98 8d       	ldd	r25, Y+24	; 0x18
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	3f ef       	ldi	r19, 0xFF	; 255
    2150:	4f e7       	ldi	r20, 0x7F	; 127
    2152:	57 e4       	ldi	r21, 0x47	; 71
    2154:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2158:	18 16       	cp	r1, r24
    215a:	4c f5       	brge	.+82     	; 0x21ae <HCLCD_WriteCommand4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	69 8d       	ldd	r22, Y+25	; 0x19
    215e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2160:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2162:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	40 e2       	ldi	r20, 0x20	; 32
    216a:	51 e4       	ldi	r21, 0x41	; 65
    216c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	9c 8b       	std	Y+20, r25	; 0x14
    2182:	8b 8b       	std	Y+19, r24	; 0x13
    2184:	0f c0       	rjmp	.+30     	; 0x21a4 <HCLCD_WriteCommand4Bit+0xf8>
    2186:	80 e9       	ldi	r24, 0x90	; 144
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	9a 8b       	std	Y+18, r25	; 0x12
    218c:	89 8b       	std	Y+17, r24	; 0x11
    218e:	89 89       	ldd	r24, Y+17	; 0x11
    2190:	9a 89       	ldd	r25, Y+18	; 0x12
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <HCLCD_WriteCommand4Bit+0xe6>
    2196:	9a 8b       	std	Y+18, r25	; 0x12
    2198:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219a:	8b 89       	ldd	r24, Y+19	; 0x13
    219c:	9c 89       	ldd	r25, Y+20	; 0x14
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a4:	8b 89       	ldd	r24, Y+19	; 0x13
    21a6:	9c 89       	ldd	r25, Y+20	; 0x14
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	69 f7       	brne	.-38     	; 0x2186 <HCLCD_WriteCommand4Bit+0xda>
    21ac:	14 c0       	rjmp	.+40     	; 0x21d6 <HCLCD_WriteCommand4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ae:	6d 89       	ldd	r22, Y+21	; 0x15
    21b0:	7e 89       	ldd	r23, Y+22	; 0x16
    21b2:	8f 89       	ldd	r24, Y+23	; 0x17
    21b4:	98 8d       	ldd	r25, Y+24	; 0x18
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	9c 8b       	std	Y+20, r25	; 0x14
    21c0:	8b 8b       	std	Y+19, r24	; 0x13
    21c2:	8b 89       	ldd	r24, Y+19	; 0x13
    21c4:	9c 89       	ldd	r25, Y+20	; 0x14
    21c6:	98 8b       	std	Y+16, r25	; 0x10
    21c8:	8f 87       	std	Y+15, r24	; 0x0f
    21ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    21cc:	98 89       	ldd	r25, Y+16	; 0x10
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <HCLCD_WriteCommand4Bit+0x122>
    21d2:	98 8b       	std	Y+16, r25	; 0x10
    21d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    21d6:	83 e0       	ldi	r24, 0x03	; 3
    21d8:	61 e0       	ldi	r22, 0x01	; 1
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	//Set low Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Comman );
    21e0:	84 e0       	ldi	r24, 0x04	; 4
    21e2:	60 e0       	ldi	r22, 0x00	; 0
    21e4:	4d 8d       	ldd	r20, Y+29	; 0x1d
    21e6:	0e 94 43 0b 	call	0x1686	; 0x1686 <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    21ea:	83 e0       	ldi	r24, 0x03	; 3
    21ec:	61 e0       	ldi	r22, 0x01	; 1
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e0       	ldi	r26, 0x00	; 0
    21fa:	b0 e4       	ldi	r27, 0x40	; 64
    21fc:	8b 87       	std	Y+11, r24	; 0x0b
    21fe:	9c 87       	std	Y+12, r25	; 0x0c
    2200:	ad 87       	std	Y+13, r26	; 0x0d
    2202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	4a e7       	ldi	r20, 0x7A	; 122
    2212:	55 e4       	ldi	r21, 0x45	; 69
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	a9 87       	std	Y+9, r26	; 0x09
    2222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <HCLCD_WriteCommand4Bit+0x19a>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <HCLCD_WriteCommand4Bit+0x218>
	else if (__tmp > 65535)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <HCLCD_WriteCommand4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <HCLCD_WriteCommand4Bit+0x1fa>
    2288:	80 e9       	ldi	r24, 0x90	; 144
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <HCLCD_WriteCommand4Bit+0x1e8>
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <HCLCD_WriteCommand4Bit+0x1dc>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <HCLCD_WriteCommand4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <HCLCD_WriteCommand4Bit+0x224>
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    22d8:	83 e0       	ldi	r24, 0x03	; 3
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	40 e0       	ldi	r20, 0x00	; 0
    22de:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
}
    22e2:	6d 96       	adiw	r28, 0x1d	; 29
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <HCLCD_Init4Bit>:

void HCLCD_Init4Bit()
{
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	c5 55       	subi	r28, 0x55	; 85
    2302:	d0 40       	sbci	r29, 0x00	; 0
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	fe 01       	movw	r30, r28
    2310:	ef 5a       	subi	r30, 0xAF	; 175
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	ac e0       	ldi	r26, 0x0C	; 12
    231a:	b2 e4       	ldi	r27, 0x42	; 66
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	8e 01       	movw	r16, r28
    2326:	03 5b       	subi	r16, 0xB3	; 179
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	ef 5a       	subi	r30, 0xAF	; 175
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a e7       	ldi	r20, 0x7A	; 122
    233e:	55 e4       	ldi	r21, 0x45	; 69
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2352:	fe 01       	movw	r30, r28
    2354:	e3 5b       	subi	r30, 0xB3	; 179
    2356:	ff 4f       	sbci	r31, 0xFF	; 255
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	82 81       	ldd	r24, Z+2	; 0x02
    235e:	93 81       	ldd	r25, Z+3	; 0x03
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e8       	ldi	r20, 0x80	; 128
    2366:	5f e3       	ldi	r21, 0x3F	; 63
    2368:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236c:	88 23       	and	r24, r24
    236e:	44 f4       	brge	.+16     	; 0x2380 <HCLCD_Init4Bit+0x8c>
		__ticks = 1;
    2370:	fe 01       	movw	r30, r28
    2372:	e5 5b       	subi	r30, 0xB5	; 181
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	91 83       	std	Z+1, r25	; 0x01
    237c:	80 83       	st	Z, r24
    237e:	64 c0       	rjmp	.+200    	; 0x2448 <HCLCD_Init4Bit+0x154>
	else if (__tmp > 65535)
    2380:	fe 01       	movw	r30, r28
    2382:	e3 5b       	subi	r30, 0xB3	; 179
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	60 81       	ld	r22, Z
    2388:	71 81       	ldd	r23, Z+1	; 0x01
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	93 81       	ldd	r25, Z+3	; 0x03
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	0c f0       	brlt	.+2      	; 0x23a0 <HCLCD_Init4Bit+0xac>
    239e:	43 c0       	rjmp	.+134    	; 0x2426 <HCLCD_Init4Bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23a0:	fe 01       	movw	r30, r28
    23a2:	ef 5a       	subi	r30, 0xAF	; 175
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e2       	ldi	r20, 0x20	; 32
    23b4:	51 e4       	ldi	r21, 0x41	; 65
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	8e 01       	movw	r16, r28
    23c0:	05 5b       	subi	r16, 0xB5	; 181
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	bc 01       	movw	r22, r24
    23c6:	cd 01       	movw	r24, r26
    23c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	f8 01       	movw	r30, r16
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
    23d6:	1f c0       	rjmp	.+62     	; 0x2416 <HCLCD_Init4Bit+0x122>
    23d8:	fe 01       	movw	r30, r28
    23da:	e7 5b       	subi	r30, 0xB7	; 183
    23dc:	ff 4f       	sbci	r31, 0xFF	; 255
    23de:	80 e9       	ldi	r24, 0x90	; 144
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	91 83       	std	Z+1, r25	; 0x01
    23e4:	80 83       	st	Z, r24
    23e6:	fe 01       	movw	r30, r28
    23e8:	e7 5b       	subi	r30, 0xB7	; 183
    23ea:	ff 4f       	sbci	r31, 0xFF	; 255
    23ec:	80 81       	ld	r24, Z
    23ee:	91 81       	ldd	r25, Z+1	; 0x01
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <HCLCD_Init4Bit+0xfc>
    23f4:	fe 01       	movw	r30, r28
    23f6:	e7 5b       	subi	r30, 0xB7	; 183
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23fe:	de 01       	movw	r26, r28
    2400:	a5 5b       	subi	r26, 0xB5	; 181
    2402:	bf 4f       	sbci	r27, 0xFF	; 255
    2404:	fe 01       	movw	r30, r28
    2406:	e5 5b       	subi	r30, 0xB5	; 181
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	11 96       	adiw	r26, 0x01	; 1
    2412:	9c 93       	st	X, r25
    2414:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	fe 01       	movw	r30, r28
    2418:	e5 5b       	subi	r30, 0xB5	; 181
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	80 81       	ld	r24, Z
    241e:	91 81       	ldd	r25, Z+1	; 0x01
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	d1 f6       	brne	.-76     	; 0x23d8 <HCLCD_Init4Bit+0xe4>
    2424:	28 c0       	rjmp	.+80     	; 0x2476 <HCLCD_Init4Bit+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2426:	8e 01       	movw	r16, r28
    2428:	05 5b       	subi	r16, 0xB5	; 181
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e3 5b       	subi	r30, 0xB3	; 179
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	f8 01       	movw	r30, r16
    2444:	91 83       	std	Z+1, r25	; 0x01
    2446:	80 83       	st	Z, r24
    2448:	de 01       	movw	r26, r28
    244a:	a9 5b       	subi	r26, 0xB9	; 185
    244c:	bf 4f       	sbci	r27, 0xFF	; 255
    244e:	fe 01       	movw	r30, r28
    2450:	e5 5b       	subi	r30, 0xB5	; 181
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	80 81       	ld	r24, Z
    2456:	91 81       	ldd	r25, Z+1	; 0x01
    2458:	11 96       	adiw	r26, 0x01	; 1
    245a:	9c 93       	st	X, r25
    245c:	8e 93       	st	-X, r24
    245e:	fe 01       	movw	r30, r28
    2460:	e9 5b       	subi	r30, 0xB9	; 185
    2462:	ff 4f       	sbci	r31, 0xFF	; 255
    2464:	80 81       	ld	r24, Z
    2466:	91 81       	ldd	r25, Z+1	; 0x01
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <HCLCD_Init4Bit+0x174>
    246c:	fe 01       	movw	r30, r28
    246e:	e9 5b       	subi	r30, 0xB9	; 185
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	91 83       	std	Z+1, r25	; 0x01
    2474:	80 83       	st	Z, r24
	_delay_ms(35);
	u8 Loc_u8Counter=0;
    2476:	fe 01       	movw	r30, r28
    2478:	eb 5a       	subi	r30, 0xAB	; 171
    247a:	ff 4f       	sbci	r31, 0xFF	; 255
    247c:	10 82       	st	Z, r1
	// Set Direction of the used pins
	for(Loc_u8Counter = HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    247e:	fe 01       	movw	r30, r28
    2480:	eb 5a       	subi	r30, 0xAB	; 171
    2482:	ff 4f       	sbci	r31, 0xFF	; 255
    2484:	84 e0       	ldi	r24, 0x04	; 4
    2486:	80 83       	st	Z, r24
    2488:	11 c0       	rjmp	.+34     	; 0x24ac <HCLCD_Init4Bit+0x1b8>
	{
		MDIO_SetPinDirection(Loc_u8Counter, DATA_PORT, PIN_OUTPUT);
    248a:	fe 01       	movw	r30, r28
    248c:	eb 5a       	subi	r30, 0xAB	; 171
    248e:	ff 4f       	sbci	r31, 0xFF	; 255
    2490:	80 81       	ld	r24, Z
    2492:	60 e0       	ldi	r22, 0x00	; 0
    2494:	41 e0       	ldi	r20, 0x01	; 1
    2496:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
void HCLCD_Init4Bit()
{
	_delay_ms(35);
	u8 Loc_u8Counter=0;
	// Set Direction of the used pins
	for(Loc_u8Counter = HCLCD_PIN_START;Loc_u8Counter<(HCLCD_PIN_START+4);Loc_u8Counter++)
    249a:	de 01       	movw	r26, r28
    249c:	ab 5a       	subi	r26, 0xAB	; 171
    249e:	bf 4f       	sbci	r27, 0xFF	; 255
    24a0:	fe 01       	movw	r30, r28
    24a2:	eb 5a       	subi	r30, 0xAB	; 171
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	80 81       	ld	r24, Z
    24a8:	8f 5f       	subi	r24, 0xFF	; 255
    24aa:	8c 93       	st	X, r24
    24ac:	fe 01       	movw	r30, r28
    24ae:	eb 5a       	subi	r30, 0xAB	; 171
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 81       	ld	r24, Z
    24b4:	88 30       	cpi	r24, 0x08	; 8
    24b6:	48 f3       	brcs	.-46     	; 0x248a <HCLCD_Init4Bit+0x196>
	{
		MDIO_SetPinDirection(Loc_u8Counter, DATA_PORT, PIN_OUTPUT);
	}
	// Set Direction of the Control pins
	MDIO_SetPinDirection(RS, CONTROL_PORT, PIN_OUTPUT);
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	61 e0       	ldi	r22, 0x01	; 1
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(RW, CONTROL_PORT, PIN_OUTPUT);
    24c2:	82 e0       	ldi	r24, 0x02	; 2
    24c4:	61 e0       	ldi	r22, 0x01	; 1
    24c6:	41 e0       	ldi	r20, 0x01	; 1
    24c8:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(E, CONTROL_PORT, PIN_OUTPUT);
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	61 e0       	ldi	r22, 0x01	; 1
    24d0:	41 e0       	ldi	r20, 0x01	; 1
    24d2:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>


	MDIO_SetNibbleValue(HCLCD_PIN_START, DATA_PORT, FUNCTION_SET_MODE >> 4);
    24d6:	84 e0       	ldi	r24, 0x04	; 4
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	42 e0       	ldi	r20, 0x02	; 2
    24dc:	0e 94 43 0b 	call	0x1686	; 0x1686 <MDIO_SetNibbleValue>
	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 5b       	subi	r30, 0xBD	; 189
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 e0       	ldi	r24, 0x00	; 0
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	a0 e0       	ldi	r26, 0x00	; 0
    24f6:	b0 e4       	ldi	r27, 0x40	; 64
    24f8:	80 83       	st	Z, r24
    24fa:	91 83       	std	Z+1, r25	; 0x01
    24fc:	a2 83       	std	Z+2, r26	; 0x02
    24fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2500:	8e 01       	movw	r16, r28
    2502:	01 5c       	subi	r16, 0xC1	; 193
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	fe 01       	movw	r30, r28
    2508:	ed 5b       	subi	r30, 0xBD	; 189
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	82 81       	ldd	r24, Z+2	; 0x02
    2512:	93 81       	ldd	r25, Z+3	; 0x03
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	4a e7       	ldi	r20, 0x7A	; 122
    251a:	55 e4       	ldi	r21, 0x45	; 69
    251c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	f8 01       	movw	r30, r16
    2526:	80 83       	st	Z, r24
    2528:	91 83       	std	Z+1, r25	; 0x01
    252a:	a2 83       	std	Z+2, r26	; 0x02
    252c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    252e:	fe 01       	movw	r30, r28
    2530:	ff 96       	adiw	r30, 0x3f	; 63
    2532:	60 81       	ld	r22, Z
    2534:	71 81       	ldd	r23, Z+1	; 0x01
    2536:	82 81       	ldd	r24, Z+2	; 0x02
    2538:	93 81       	ldd	r25, Z+3	; 0x03
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <HCLCD_Init4Bit+0x260>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e af       	std	Y+62, r25	; 0x3e
    2550:	8d af       	std	Y+61, r24	; 0x3d
    2552:	46 c0       	rjmp	.+140    	; 0x25e0 <HCLCD_Init4Bit+0x2ec>
	else if (__tmp > 65535)
    2554:	fe 01       	movw	r30, r28
    2556:	ff 96       	adiw	r30, 0x3f	; 63
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	64 f5       	brge	.+88     	; 0x25c8 <HCLCD_Init4Bit+0x2d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	fe 01       	movw	r30, r28
    2572:	ed 5b       	subi	r30, 0xBD	; 189
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	60 81       	ld	r22, Z
    2578:	71 81       	ldd	r23, Z+1	; 0x01
    257a:	82 81       	ldd	r24, Z+2	; 0x02
    257c:	93 81       	ldd	r25, Z+3	; 0x03
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e2       	ldi	r20, 0x20	; 32
    2584:	51 e4       	ldi	r21, 0x41	; 65
    2586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	bc 01       	movw	r22, r24
    2590:	cd 01       	movw	r24, r26
    2592:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2596:	dc 01       	movw	r26, r24
    2598:	cb 01       	movw	r24, r22
    259a:	9e af       	std	Y+62, r25	; 0x3e
    259c:	8d af       	std	Y+61, r24	; 0x3d
    259e:	0f c0       	rjmp	.+30     	; 0x25be <HCLCD_Init4Bit+0x2ca>
    25a0:	80 e9       	ldi	r24, 0x90	; 144
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	9c af       	std	Y+60, r25	; 0x3c
    25a6:	8b af       	std	Y+59, r24	; 0x3b
    25a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    25aa:	9c ad       	ldd	r25, Y+60	; 0x3c
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	f1 f7       	brne	.-4      	; 0x25ac <HCLCD_Init4Bit+0x2b8>
    25b0:	9c af       	std	Y+60, r25	; 0x3c
    25b2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b4:	8d ad       	ldd	r24, Y+61	; 0x3d
    25b6:	9e ad       	ldd	r25, Y+62	; 0x3e
    25b8:	01 97       	sbiw	r24, 0x01	; 1
    25ba:	9e af       	std	Y+62, r25	; 0x3e
    25bc:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25be:	8d ad       	ldd	r24, Y+61	; 0x3d
    25c0:	9e ad       	ldd	r25, Y+62	; 0x3e
    25c2:	00 97       	sbiw	r24, 0x00	; 0
    25c4:	69 f7       	brne	.-38     	; 0x25a0 <HCLCD_Init4Bit+0x2ac>
    25c6:	16 c0       	rjmp	.+44     	; 0x25f4 <HCLCD_Init4Bit+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c8:	fe 01       	movw	r30, r28
    25ca:	ff 96       	adiw	r30, 0x3f	; 63
    25cc:	60 81       	ld	r22, Z
    25ce:	71 81       	ldd	r23, Z+1	; 0x01
    25d0:	82 81       	ldd	r24, Z+2	; 0x02
    25d2:	93 81       	ldd	r25, Z+3	; 0x03
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9e af       	std	Y+62, r25	; 0x3e
    25de:	8d af       	std	Y+61, r24	; 0x3d
    25e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    25e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    25e4:	9a af       	std	Y+58, r25	; 0x3a
    25e6:	89 af       	std	Y+57, r24	; 0x39
    25e8:	89 ad       	ldd	r24, Y+57	; 0x39
    25ea:	9a ad       	ldd	r25, Y+58	; 0x3a
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <HCLCD_Init4Bit+0x2f8>
    25f0:	9a af       	std	Y+58, r25	; 0x3a
    25f2:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	61 e0       	ldi	r22, 0x01	; 1
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	a0 e8       	ldi	r26, 0x80	; 128
    2604:	bf e3       	ldi	r27, 0x3F	; 63
    2606:	8d ab       	std	Y+53, r24	; 0x35
    2608:	9e ab       	std	Y+54, r25	; 0x36
    260a:	af ab       	std	Y+55, r26	; 0x37
    260c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    260e:	6d a9       	ldd	r22, Y+53	; 0x35
    2610:	7e a9       	ldd	r23, Y+54	; 0x36
    2612:	8f a9       	ldd	r24, Y+55	; 0x37
    2614:	98 ad       	ldd	r25, Y+56	; 0x38
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a e7       	ldi	r20, 0x7A	; 122
    261c:	55 e4       	ldi	r21, 0x45	; 69
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	89 ab       	std	Y+49, r24	; 0x31
    2628:	9a ab       	std	Y+50, r25	; 0x32
    262a:	ab ab       	std	Y+51, r26	; 0x33
    262c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    262e:	69 a9       	ldd	r22, Y+49	; 0x31
    2630:	7a a9       	ldd	r23, Y+50	; 0x32
    2632:	8b a9       	ldd	r24, Y+51	; 0x33
    2634:	9c a9       	ldd	r25, Y+52	; 0x34
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	40 e8       	ldi	r20, 0x80	; 128
    263c:	5f e3       	ldi	r21, 0x3F	; 63
    263e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2642:	88 23       	and	r24, r24
    2644:	2c f4       	brge	.+10     	; 0x2650 <HCLCD_Init4Bit+0x35c>
		__ticks = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	98 ab       	std	Y+48, r25	; 0x30
    264c:	8f a7       	std	Y+47, r24	; 0x2f
    264e:	3f c0       	rjmp	.+126    	; 0x26ce <HCLCD_Init4Bit+0x3da>
	else if (__tmp > 65535)
    2650:	69 a9       	ldd	r22, Y+49	; 0x31
    2652:	7a a9       	ldd	r23, Y+50	; 0x32
    2654:	8b a9       	ldd	r24, Y+51	; 0x33
    2656:	9c a9       	ldd	r25, Y+52	; 0x34
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	3f ef       	ldi	r19, 0xFF	; 255
    265c:	4f e7       	ldi	r20, 0x7F	; 127
    265e:	57 e4       	ldi	r21, 0x47	; 71
    2660:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2664:	18 16       	cp	r1, r24
    2666:	4c f5       	brge	.+82     	; 0x26ba <HCLCD_Init4Bit+0x3c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2668:	6d a9       	ldd	r22, Y+53	; 0x35
    266a:	7e a9       	ldd	r23, Y+54	; 0x36
    266c:	8f a9       	ldd	r24, Y+55	; 0x37
    266e:	98 ad       	ldd	r25, Y+56	; 0x38
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e2       	ldi	r20, 0x20	; 32
    2676:	51 e4       	ldi	r21, 0x41	; 65
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	bc 01       	movw	r22, r24
    2682:	cd 01       	movw	r24, r26
    2684:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2688:	dc 01       	movw	r26, r24
    268a:	cb 01       	movw	r24, r22
    268c:	98 ab       	std	Y+48, r25	; 0x30
    268e:	8f a7       	std	Y+47, r24	; 0x2f
    2690:	0f c0       	rjmp	.+30     	; 0x26b0 <HCLCD_Init4Bit+0x3bc>
    2692:	80 e9       	ldi	r24, 0x90	; 144
    2694:	91 e0       	ldi	r25, 0x01	; 1
    2696:	9e a7       	std	Y+46, r25	; 0x2e
    2698:	8d a7       	std	Y+45, r24	; 0x2d
    269a:	8d a5       	ldd	r24, Y+45	; 0x2d
    269c:	9e a5       	ldd	r25, Y+46	; 0x2e
    269e:	01 97       	sbiw	r24, 0x01	; 1
    26a0:	f1 f7       	brne	.-4      	; 0x269e <HCLCD_Init4Bit+0x3aa>
    26a2:	9e a7       	std	Y+46, r25	; 0x2e
    26a4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	01 97       	sbiw	r24, 0x01	; 1
    26ac:	98 ab       	std	Y+48, r25	; 0x30
    26ae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b2:	98 a9       	ldd	r25, Y+48	; 0x30
    26b4:	00 97       	sbiw	r24, 0x00	; 0
    26b6:	69 f7       	brne	.-38     	; 0x2692 <HCLCD_Init4Bit+0x39e>
    26b8:	14 c0       	rjmp	.+40     	; 0x26e2 <HCLCD_Init4Bit+0x3ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ba:	69 a9       	ldd	r22, Y+49	; 0x31
    26bc:	7a a9       	ldd	r23, Y+50	; 0x32
    26be:	8b a9       	ldd	r24, Y+51	; 0x33
    26c0:	9c a9       	ldd	r25, Y+52	; 0x34
    26c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	98 ab       	std	Y+48, r25	; 0x30
    26cc:	8f a7       	std	Y+47, r24	; 0x2f
    26ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d0:	98 a9       	ldd	r25, Y+48	; 0x30
    26d2:	9c a7       	std	Y+44, r25	; 0x2c
    26d4:	8b a7       	std	Y+43, r24	; 0x2b
    26d6:	8b a5       	ldd	r24, Y+43	; 0x2b
    26d8:	9c a5       	ldd	r25, Y+44	; 0x2c
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <HCLCD_Init4Bit+0x3e6>
    26de:	9c a7       	std	Y+44, r25	; 0x2c
    26e0:	8b a7       	std	Y+43, r24	; 0x2b

	//Start of the initialization sequence
	// Send Function Set Command
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(FUNCTION_SET_MODE);
    26e2:	88 e2       	ldi	r24, 0x28	; 40
    26e4:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a0 e8       	ldi	r26, 0x80	; 128
    26ee:	bf e3       	ldi	r27, 0x3F	; 63
    26f0:	8f a3       	std	Y+39, r24	; 0x27
    26f2:	98 a7       	std	Y+40, r25	; 0x28
    26f4:	a9 a7       	std	Y+41, r26	; 0x29
    26f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f8:	6f a1       	ldd	r22, Y+39	; 0x27
    26fa:	78 a5       	ldd	r23, Y+40	; 0x28
    26fc:	89 a5       	ldd	r24, Y+41	; 0x29
    26fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	4a e7       	ldi	r20, 0x7A	; 122
    2706:	55 e4       	ldi	r21, 0x45	; 69
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	8b a3       	std	Y+35, r24	; 0x23
    2712:	9c a3       	std	Y+36, r25	; 0x24
    2714:	ad a3       	std	Y+37, r26	; 0x25
    2716:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2718:	6b a1       	ldd	r22, Y+35	; 0x23
    271a:	7c a1       	ldd	r23, Y+36	; 0x24
    271c:	8d a1       	ldd	r24, Y+37	; 0x25
    271e:	9e a1       	ldd	r25, Y+38	; 0x26
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	2c f4       	brge	.+10     	; 0x273a <HCLCD_Init4Bit+0x446>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9a a3       	std	Y+34, r25	; 0x22
    2736:	89 a3       	std	Y+33, r24	; 0x21
    2738:	3f c0       	rjmp	.+126    	; 0x27b8 <HCLCD_Init4Bit+0x4c4>
	else if (__tmp > 65535)
    273a:	6b a1       	ldd	r22, Y+35	; 0x23
    273c:	7c a1       	ldd	r23, Y+36	; 0x24
    273e:	8d a1       	ldd	r24, Y+37	; 0x25
    2740:	9e a1       	ldd	r25, Y+38	; 0x26
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	3f ef       	ldi	r19, 0xFF	; 255
    2746:	4f e7       	ldi	r20, 0x7F	; 127
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    274e:	18 16       	cp	r1, r24
    2750:	4c f5       	brge	.+82     	; 0x27a4 <HCLCD_Init4Bit+0x4b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2752:	6f a1       	ldd	r22, Y+39	; 0x27
    2754:	78 a5       	ldd	r23, Y+40	; 0x28
    2756:	89 a5       	ldd	r24, Y+41	; 0x29
    2758:	9a a5       	ldd	r25, Y+42	; 0x2a
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e2       	ldi	r20, 0x20	; 32
    2760:	51 e4       	ldi	r21, 0x41	; 65
    2762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2766:	dc 01       	movw	r26, r24
    2768:	cb 01       	movw	r24, r22
    276a:	bc 01       	movw	r22, r24
    276c:	cd 01       	movw	r24, r26
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	9a a3       	std	Y+34, r25	; 0x22
    2778:	89 a3       	std	Y+33, r24	; 0x21
    277a:	0f c0       	rjmp	.+30     	; 0x279a <HCLCD_Init4Bit+0x4a6>
    277c:	80 e9       	ldi	r24, 0x90	; 144
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	98 a3       	std	Y+32, r25	; 0x20
    2782:	8f 8f       	std	Y+31, r24	; 0x1f
    2784:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2786:	98 a1       	ldd	r25, Y+32	; 0x20
    2788:	01 97       	sbiw	r24, 0x01	; 1
    278a:	f1 f7       	brne	.-4      	; 0x2788 <HCLCD_Init4Bit+0x494>
    278c:	98 a3       	std	Y+32, r25	; 0x20
    278e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2790:	89 a1       	ldd	r24, Y+33	; 0x21
    2792:	9a a1       	ldd	r25, Y+34	; 0x22
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	9a a3       	std	Y+34, r25	; 0x22
    2798:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279a:	89 a1       	ldd	r24, Y+33	; 0x21
    279c:	9a a1       	ldd	r25, Y+34	; 0x22
    279e:	00 97       	sbiw	r24, 0x00	; 0
    27a0:	69 f7       	brne	.-38     	; 0x277c <HCLCD_Init4Bit+0x488>
    27a2:	14 c0       	rjmp	.+40     	; 0x27cc <HCLCD_Init4Bit+0x4d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a4:	6b a1       	ldd	r22, Y+35	; 0x23
    27a6:	7c a1       	ldd	r23, Y+36	; 0x24
    27a8:	8d a1       	ldd	r24, Y+37	; 0x25
    27aa:	9e a1       	ldd	r25, Y+38	; 0x26
    27ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b0:	dc 01       	movw	r26, r24
    27b2:	cb 01       	movw	r24, r22
    27b4:	9a a3       	std	Y+34, r25	; 0x22
    27b6:	89 a3       	std	Y+33, r24	; 0x21
    27b8:	89 a1       	ldd	r24, Y+33	; 0x21
    27ba:	9a a1       	ldd	r25, Y+34	; 0x22
    27bc:	9e 8f       	std	Y+30, r25	; 0x1e
    27be:	8d 8f       	std	Y+29, r24	; 0x1d
    27c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27c4:	01 97       	sbiw	r24, 0x01	; 1
    27c6:	f1 f7       	brne	.-4      	; 0x27c4 <HCLCD_Init4Bit+0x4d0>
    27c8:	9e 8f       	std	Y+30, r25	; 0x1e
    27ca:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set Function Display ON/OFF
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPLAY_COMMAND);
    27cc:	8f e0       	ldi	r24, 0x0F	; 15
    27ce:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a0 e8       	ldi	r26, 0x80	; 128
    27d8:	bf e3       	ldi	r27, 0x3F	; 63
    27da:	89 8f       	std	Y+25, r24	; 0x19
    27dc:	9a 8f       	std	Y+26, r25	; 0x1a
    27de:	ab 8f       	std	Y+27, r26	; 0x1b
    27e0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	69 8d       	ldd	r22, Y+25	; 0x19
    27e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a e7       	ldi	r20, 0x7A	; 122
    27f0:	55 e4       	ldi	r21, 0x45	; 69
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8d 8b       	std	Y+21, r24	; 0x15
    27fc:	9e 8b       	std	Y+22, r25	; 0x16
    27fe:	af 8b       	std	Y+23, r26	; 0x17
    2800:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <HCLCD_Init4Bit+0x530>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9c 8b       	std	Y+20, r25	; 0x14
    2820:	8b 8b       	std	Y+19, r24	; 0x13
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <HCLCD_Init4Bit+0x5ae>
	else if (__tmp > 65535)
    2824:	6d 89       	ldd	r22, Y+21	; 0x15
    2826:	7e 89       	ldd	r23, Y+22	; 0x16
    2828:	8f 89       	ldd	r24, Y+23	; 0x17
    282a:	98 8d       	ldd	r25, Y+24	; 0x18
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <HCLCD_Init4Bit+0x59a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	69 8d       	ldd	r22, Y+25	; 0x19
    283e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2840:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2842:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9c 8b       	std	Y+20, r25	; 0x14
    2862:	8b 8b       	std	Y+19, r24	; 0x13
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <HCLCD_Init4Bit+0x590>
    2866:	80 e9       	ldi	r24, 0x90	; 144
    2868:	91 e0       	ldi	r25, 0x01	; 1
    286a:	9a 8b       	std	Y+18, r25	; 0x12
    286c:	89 8b       	std	Y+17, r24	; 0x11
    286e:	89 89       	ldd	r24, Y+17	; 0x11
    2870:	9a 89       	ldd	r25, Y+18	; 0x12
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <HCLCD_Init4Bit+0x57e>
    2876:	9a 8b       	std	Y+18, r25	; 0x12
    2878:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8b 89       	ldd	r24, Y+19	; 0x13
    287c:	9c 89       	ldd	r25, Y+20	; 0x14
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8b 89       	ldd	r24, Y+19	; 0x13
    2886:	9c 89       	ldd	r25, Y+20	; 0x14
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <HCLCD_Init4Bit+0x572>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <HCLCD_Init4Bit+0x5c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	6d 89       	ldd	r22, Y+21	; 0x15
    2890:	7e 89       	ldd	r23, Y+22	; 0x16
    2892:	8f 89       	ldd	r24, Y+23	; 0x17
    2894:	98 8d       	ldd	r25, Y+24	; 0x18
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9c 8b       	std	Y+20, r25	; 0x14
    28a0:	8b 8b       	std	Y+19, r24	; 0x13
    28a2:	8b 89       	ldd	r24, Y+19	; 0x13
    28a4:	9c 89       	ldd	r25, Y+20	; 0x14
    28a6:	98 8b       	std	Y+16, r25	; 0x10
    28a8:	8f 87       	std	Y+15, r24	; 0x0f
    28aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ac:	98 89       	ldd	r25, Y+16	; 0x10
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <HCLCD_Init4Bit+0x5ba>
    28b2:	98 8b       	std	Y+16, r25	; 0x10
    28b4:	8f 87       	std	Y+15, r24	; 0x0f
	// Set Function Display clear
	_delay_ms(1);
	HCLCD_WriteCommand4Bit(DISPLAY_CLEAR);
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e0       	ldi	r26, 0x00	; 0
    28c2:	b0 e4       	ldi	r27, 0x40	; 64
    28c4:	8b 87       	std	Y+11, r24	; 0x0b
    28c6:	9c 87       	std	Y+12, r25	; 0x0c
    28c8:	ad 87       	std	Y+13, r26	; 0x0d
    28ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	4a e7       	ldi	r20, 0x7A	; 122
    28da:	55 e4       	ldi	r21, 0x45	; 69
    28dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	8f 83       	std	Y+7, r24	; 0x07
    28e6:	98 87       	std	Y+8, r25	; 0x08
    28e8:	a9 87       	std	Y+9, r26	; 0x09
    28ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ec:	6f 81       	ldd	r22, Y+7	; 0x07
    28ee:	78 85       	ldd	r23, Y+8	; 0x08
    28f0:	89 85       	ldd	r24, Y+9	; 0x09
    28f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2900:	88 23       	and	r24, r24
    2902:	2c f4       	brge	.+10     	; 0x290e <HCLCD_Init4Bit+0x61a>
		__ticks = 1;
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	9e 83       	std	Y+6, r25	; 0x06
    290a:	8d 83       	std	Y+5, r24	; 0x05
    290c:	3f c0       	rjmp	.+126    	; 0x298c <HCLCD_Init4Bit+0x698>
	else if (__tmp > 65535)
    290e:	6f 81       	ldd	r22, Y+7	; 0x07
    2910:	78 85       	ldd	r23, Y+8	; 0x08
    2912:	89 85       	ldd	r24, Y+9	; 0x09
    2914:	9a 85       	ldd	r25, Y+10	; 0x0a
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	3f ef       	ldi	r19, 0xFF	; 255
    291a:	4f e7       	ldi	r20, 0x7F	; 127
    291c:	57 e4       	ldi	r21, 0x47	; 71
    291e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2922:	18 16       	cp	r1, r24
    2924:	4c f5       	brge	.+82     	; 0x2978 <HCLCD_Init4Bit+0x684>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2926:	6b 85       	ldd	r22, Y+11	; 0x0b
    2928:	7c 85       	ldd	r23, Y+12	; 0x0c
    292a:	8d 85       	ldd	r24, Y+13	; 0x0d
    292c:	9e 85       	ldd	r25, Y+14	; 0x0e
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e2       	ldi	r20, 0x20	; 32
    2934:	51 e4       	ldi	r21, 0x41	; 65
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	9e 83       	std	Y+6, r25	; 0x06
    294c:	8d 83       	std	Y+5, r24	; 0x05
    294e:	0f c0       	rjmp	.+30     	; 0x296e <HCLCD_Init4Bit+0x67a>
    2950:	80 e9       	ldi	r24, 0x90	; 144
    2952:	91 e0       	ldi	r25, 0x01	; 1
    2954:	9c 83       	std	Y+4, r25	; 0x04
    2956:	8b 83       	std	Y+3, r24	; 0x03
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	01 97       	sbiw	r24, 0x01	; 1
    295e:	f1 f7       	brne	.-4      	; 0x295c <HCLCD_Init4Bit+0x668>
    2960:	9c 83       	std	Y+4, r25	; 0x04
    2962:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2964:	8d 81       	ldd	r24, Y+5	; 0x05
    2966:	9e 81       	ldd	r25, Y+6	; 0x06
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	69 f7       	brne	.-38     	; 0x2950 <HCLCD_Init4Bit+0x65c>
    2976:	14 c0       	rjmp	.+40     	; 0x29a0 <HCLCD_Init4Bit+0x6ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2978:	6f 81       	ldd	r22, Y+7	; 0x07
    297a:	78 85       	ldd	r23, Y+8	; 0x08
    297c:	89 85       	ldd	r24, Y+9	; 0x09
    297e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2984:	dc 01       	movw	r26, r24
    2986:	cb 01       	movw	r24, r22
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <HCLCD_Init4Bit+0x6a4>
    299c:	9a 83       	std	Y+2, r25	; 0x02
    299e:	89 83       	std	Y+1, r24	; 0x01
	// Entry mode
	_delay_ms(2);
	HCLCD_WriteCommand4Bit(ENTRY_MODE_COMMAND);
    29a0:	86 e0       	ldi	r24, 0x06	; 6
    29a2:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
}
    29a6:	cb 5a       	subi	r28, 0xAB	; 171
    29a8:	df 4f       	sbci	r29, 0xFF	; 255
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	08 95       	ret

000029be <HCLCD_WritChar4Bit>:

void HCLCD_WritChar4Bit(u8 Copy_u8Data)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	6d 97       	sbiw	r28, 0x1d	; 29
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
    29d2:	8d 8f       	std	Y+29, r24	; 0x1d
	// Set RW to Zero
	MDIO_SetPinValue(RW,CONTROL_PORT, PIN_LOW);
    29d4:	82 e0       	ldi	r24, 0x02	; 2
    29d6:	61 e0       	ldi	r22, 0x01	; 1
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	// Set RS to Zero ==> to indicate a command
	MDIO_SetPinValue(RS,CONTROL_PORT, PIN_HIGH);
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	61 e0       	ldi	r22, 0x01	; 1
    29e2:	41 e0       	ldi	r20, 0x01	; 1
    29e4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	//Set High Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Data>>4 );
    29e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ea:	98 2f       	mov	r25, r24
    29ec:	92 95       	swap	r25
    29ee:	9f 70       	andi	r25, 0x0F	; 15
    29f0:	84 e0       	ldi	r24, 0x04	; 4
    29f2:	60 e0       	ldi	r22, 0x00	; 0
    29f4:	49 2f       	mov	r20, r25
    29f6:	0e 94 43 0b 	call	0x1686	; 0x1686 <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    29fa:	83 e0       	ldi	r24, 0x03	; 3
    29fc:	61 e0       	ldi	r22, 0x01	; 1
    29fe:	41 e0       	ldi	r20, 0x01	; 1
    2a00:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    2a04:	80 e0       	ldi	r24, 0x00	; 0
    2a06:	90 e0       	ldi	r25, 0x00	; 0
    2a08:	a0 e0       	ldi	r26, 0x00	; 0
    2a0a:	b0 e4       	ldi	r27, 0x40	; 64
    2a0c:	89 8f       	std	Y+25, r24	; 0x19
    2a0e:	9a 8f       	std	Y+26, r25	; 0x1a
    2a10:	ab 8f       	std	Y+27, r26	; 0x1b
    2a12:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a14:	69 8d       	ldd	r22, Y+25	; 0x19
    2a16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	55 e4       	ldi	r21, 0x45	; 69
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	8d 8b       	std	Y+21, r24	; 0x15
    2a2e:	9e 8b       	std	Y+22, r25	; 0x16
    2a30:	af 8b       	std	Y+23, r26	; 0x17
    2a32:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a34:	6d 89       	ldd	r22, Y+21	; 0x15
    2a36:	7e 89       	ldd	r23, Y+22	; 0x16
    2a38:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	40 e8       	ldi	r20, 0x80	; 128
    2a42:	5f e3       	ldi	r21, 0x3F	; 63
    2a44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a48:	88 23       	and	r24, r24
    2a4a:	2c f4       	brge	.+10     	; 0x2a56 <HCLCD_WritChar4Bit+0x98>
		__ticks = 1;
    2a4c:	81 e0       	ldi	r24, 0x01	; 1
    2a4e:	90 e0       	ldi	r25, 0x00	; 0
    2a50:	9c 8b       	std	Y+20, r25	; 0x14
    2a52:	8b 8b       	std	Y+19, r24	; 0x13
    2a54:	3f c0       	rjmp	.+126    	; 0x2ad4 <HCLCD_WritChar4Bit+0x116>
	else if (__tmp > 65535)
    2a56:	6d 89       	ldd	r22, Y+21	; 0x15
    2a58:	7e 89       	ldd	r23, Y+22	; 0x16
    2a5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	3f ef       	ldi	r19, 0xFF	; 255
    2a62:	4f e7       	ldi	r20, 0x7F	; 127
    2a64:	57 e4       	ldi	r21, 0x47	; 71
    2a66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a6a:	18 16       	cp	r1, r24
    2a6c:	4c f5       	brge	.+82     	; 0x2ac0 <HCLCD_WritChar4Bit+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a6e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a70:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a74:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	30 e0       	ldi	r19, 0x00	; 0
    2a7a:	40 e2       	ldi	r20, 0x20	; 32
    2a7c:	51 e4       	ldi	r21, 0x41	; 65
    2a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a82:	dc 01       	movw	r26, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	bc 01       	movw	r22, r24
    2a88:	cd 01       	movw	r24, r26
    2a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	9c 8b       	std	Y+20, r25	; 0x14
    2a94:	8b 8b       	std	Y+19, r24	; 0x13
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <HCLCD_WritChar4Bit+0xf8>
    2a98:	80 e9       	ldi	r24, 0x90	; 144
    2a9a:	91 e0       	ldi	r25, 0x01	; 1
    2a9c:	9a 8b       	std	Y+18, r25	; 0x12
    2a9e:	89 8b       	std	Y+17, r24	; 0x11
    2aa0:	89 89       	ldd	r24, Y+17	; 0x11
    2aa2:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa4:	01 97       	sbiw	r24, 0x01	; 1
    2aa6:	f1 f7       	brne	.-4      	; 0x2aa4 <HCLCD_WritChar4Bit+0xe6>
    2aa8:	9a 8b       	std	Y+18, r25	; 0x12
    2aaa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aac:	8b 89       	ldd	r24, Y+19	; 0x13
    2aae:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	9c 8b       	std	Y+20, r25	; 0x14
    2ab4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aba:	00 97       	sbiw	r24, 0x00	; 0
    2abc:	69 f7       	brne	.-38     	; 0x2a98 <HCLCD_WritChar4Bit+0xda>
    2abe:	14 c0       	rjmp	.+40     	; 0x2ae8 <HCLCD_WritChar4Bit+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	9c 8b       	std	Y+20, r25	; 0x14
    2ad2:	8b 8b       	std	Y+19, r24	; 0x13
    2ad4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad8:	98 8b       	std	Y+16, r25	; 0x10
    2ada:	8f 87       	std	Y+15, r24	; 0x0f
    2adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ade:	98 89       	ldd	r25, Y+16	; 0x10
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <HCLCD_WritChar4Bit+0x122>
    2ae4:	98 8b       	std	Y+16, r25	; 0x10
    2ae6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	61 e0       	ldi	r22, 0x01	; 1
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

	//Set low Nibble Value if the Command
	MDIO_SetNibbleValue(HCLCD_PIN_START,DATA_PORT , Copy_u8Data );
    2af2:	84 e0       	ldi	r24, 0x04	; 4
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    2af8:	0e 94 43 0b 	call	0x1686	; 0x1686 <MDIO_SetNibbleValue>

	// Send the Falling Edge
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_HIGH);
    2afc:	83 e0       	ldi	r24, 0x03	; 3
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	41 e0       	ldi	r20, 0x01	; 1
    2b02:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e4       	ldi	r27, 0x40	; 64
    2b0e:	8b 87       	std	Y+11, r24	; 0x0b
    2b10:	9c 87       	std	Y+12, r25	; 0x0c
    2b12:	ad 87       	std	Y+13, r26	; 0x0d
    2b14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b18:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a e7       	ldi	r20, 0x7A	; 122
    2b24:	55 e4       	ldi	r21, 0x45	; 69
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	8f 83       	std	Y+7, r24	; 0x07
    2b30:	98 87       	std	Y+8, r25	; 0x08
    2b32:	a9 87       	std	Y+9, r26	; 0x09
    2b34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b36:	6f 81       	ldd	r22, Y+7	; 0x07
    2b38:	78 85       	ldd	r23, Y+8	; 0x08
    2b3a:	89 85       	ldd	r24, Y+9	; 0x09
    2b3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <HCLCD_WritChar4Bit+0x19a>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <HCLCD_WritChar4Bit+0x218>
	else if (__tmp > 65535)
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <HCLCD_WritChar4Bit+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	9e 83       	std	Y+6, r25	; 0x06
    2b96:	8d 83       	std	Y+5, r24	; 0x05
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <HCLCD_WritChar4Bit+0x1fa>
    2b9a:	80 e9       	ldi	r24, 0x90	; 144
    2b9c:	91 e0       	ldi	r25, 0x01	; 1
    2b9e:	9c 83       	std	Y+4, r25	; 0x04
    2ba0:	8b 83       	std	Y+3, r24	; 0x03
    2ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <HCLCD_WritChar4Bit+0x1e8>
    2baa:	9c 83       	std	Y+4, r25	; 0x04
    2bac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8d 81       	ldd	r24, Y+5	; 0x05
    2bb0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	9e 83       	std	Y+6, r25	; 0x06
    2bb6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bba:	9e 81       	ldd	r25, Y+6	; 0x06
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <HCLCD_WritChar4Bit+0x1dc>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <HCLCD_WritChar4Bit+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc4:	78 85       	ldd	r23, Y+8	; 0x08
    2bc6:	89 85       	ldd	r24, Y+9	; 0x09
    2bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	9a 83       	std	Y+2, r25	; 0x02
    2bdc:	89 83       	std	Y+1, r24	; 0x01
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <HCLCD_WritChar4Bit+0x224>
    2be6:	9a 83       	std	Y+2, r25	; 0x02
    2be8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_SetPinValue(E, CONTROL_PORT, PIN_LOW);
    2bea:	83 e0       	ldi	r24, 0x03	; 3
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
}
    2bf4:	6d 96       	adiw	r28, 0x1d	; 29
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <HCLCD_SetCursorPosition4Bit>:


void HCLCD_SetCursorPosition4Bit(u8 LineNumber , u8 PositionNumber)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <HCLCD_SetCursorPosition4Bit+0x6>
    2c0c:	cd b7       	in	r28, 0x3d	; 61
    2c0e:	de b7       	in	r29, 0x3e	; 62
    2c10:	89 83       	std	Y+1, r24	; 0x01
    2c12:	6a 83       	std	Y+2, r22	; 0x02
	if((LineNumber == HCLCD_LINE0)||(LineNumber == HCLCD_LINE1))
    2c14:	89 81       	ldd	r24, Y+1	; 0x01
    2c16:	88 23       	and	r24, r24
    2c18:	19 f0       	breq	.+6      	; 0x2c20 <HCLCD_SetCursorPosition4Bit+0x1a>
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	81 30       	cpi	r24, 0x01	; 1
    2c1e:	79 f4       	brne	.+30     	; 0x2c3e <HCLCD_SetCursorPosition4Bit+0x38>
	{
		if (PositionNumber<16)
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	80 31       	cpi	r24, 0x10	; 16
    2c24:	60 f4       	brcc	.+24     	; 0x2c3e <HCLCD_SetCursorPosition4Bit+0x38>
		{
			if(LineNumber==HCLCD_LINE0)
    2c26:	89 81       	ldd	r24, Y+1	; 0x01
    2c28:	88 23       	and	r24, r24
    2c2a:	29 f4       	brne	.+10     	; 0x2c36 <HCLCD_SetCursorPosition4Bit+0x30>
			{
				// line 1
				HCLCD_WriteCommand4Bit(PositionNumber+HCLCD_LINE1_OFFSET);
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	80 58       	subi	r24, 0x80	; 128
    2c30:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
    2c34:	04 c0       	rjmp	.+8      	; 0x2c3e <HCLCD_SetCursorPosition4Bit+0x38>
			}
			else
			{
				HCLCD_WriteCommand4Bit(PositionNumber+HCLCD_LINE2_OFFSET);
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	80 54       	subi	r24, 0x40	; 64
    2c3a:	0e 94 56 10 	call	0x20ac	; 0x20ac <HCLCD_WriteCommand4Bit>
	else
	{
		//wrong line chosen
	}

}
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	cf 91       	pop	r28
    2c44:	df 91       	pop	r29
    2c46:	08 95       	ret

00002c48 <HCLCD_String_Write>:

void HCLCD_String_Write (u8 *str)
{
    2c48:	df 93       	push	r29
    2c4a:	cf 93       	push	r28
    2c4c:	00 d0       	rcall	.+0      	; 0x2c4e <HCLCD_String_Write+0x6>
    2c4e:	0f 92       	push	r0
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9b 83       	std	Y+3, r25	; 0x03
    2c56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Counter=0;
    2c58:	19 82       	std	Y+1, r1	; 0x01
	for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    2c5a:	19 82       	std	Y+1, r1	; 0x01
    2c5c:	0e c0       	rjmp	.+28     	; 0x2c7a <HCLCD_String_Write+0x32>
	{
		HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	fc 01       	movw	r30, r24
    2c6a:	e2 0f       	add	r30, r18
    2c6c:	f3 1f       	adc	r31, r19
    2c6e:	80 81       	ld	r24, Z
    2c70:	0e 94 df 14 	call	0x29be	; 0x29be <HCLCD_WritChar4Bit>
}

void HCLCD_String_Write (u8 *str)
{
	u8 Counter=0;
	for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	8f 5f       	subi	r24, 0xFF	; 255
    2c78:	89 83       	std	Y+1, r24	; 0x01
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	fc 01       	movw	r30, r24
    2c86:	e2 0f       	add	r30, r18
    2c88:	f3 1f       	adc	r31, r19
    2c8a:	80 81       	ld	r24, Z
    2c8c:	88 23       	and	r24, r24
    2c8e:	39 f7       	brne	.-50     	; 0x2c5e <HCLCD_String_Write+0x16>
	{
		HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
	}
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	cf 91       	pop	r28
    2c98:	df 91       	pop	r29
    2c9a:	08 95       	ret

00002c9c <HCLCD_String_Write_Position>:

void HCLCD_String_Write_Position (u8 *str , u8 LineNumber , u8 PositionNumber)
{
    2c9c:	df 93       	push	r29
    2c9e:	cf 93       	push	r28
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <HCLCD_String_Write_Position+0x6>
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <HCLCD_String_Write_Position+0x8>
    2ca4:	0f 92       	push	r0
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	9b 83       	std	Y+3, r25	; 0x03
    2cac:	8a 83       	std	Y+2, r24	; 0x02
    2cae:	6c 83       	std	Y+4, r22	; 0x04
    2cb0:	4d 83       	std	Y+5, r20	; 0x05
	HCLCD_SetCursorPosition4Bit( LineNumber ,  PositionNumber);
    2cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb4:	6d 81       	ldd	r22, Y+5	; 0x05
    2cb6:	0e 94 03 16 	call	0x2c06	; 0x2c06 <HCLCD_SetCursorPosition4Bit>
	u8 Counter=0;
    2cba:	19 82       	std	Y+1, r1	; 0x01
		for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    2cbc:	19 82       	std	Y+1, r1	; 0x01
    2cbe:	0e c0       	rjmp	.+28     	; 0x2cdc <HCLCD_String_Write_Position+0x40>
		{
			HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cca:	fc 01       	movw	r30, r24
    2ccc:	e2 0f       	add	r30, r18
    2cce:	f3 1f       	adc	r31, r19
    2cd0:	80 81       	ld	r24, Z
    2cd2:	0e 94 df 14 	call	0x29be	; 0x29be <HCLCD_WritChar4Bit>

void HCLCD_String_Write_Position (u8 *str , u8 LineNumber , u8 PositionNumber)
{
	HCLCD_SetCursorPosition4Bit( LineNumber ,  PositionNumber);
	u8 Counter=0;
		for(Counter=0;str[Counter]!=0;Counter++)  /* send each char of string till the NULL */
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	8f 5f       	subi	r24, 0xFF	; 255
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	28 2f       	mov	r18, r24
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce6:	fc 01       	movw	r30, r24
    2ce8:	e2 0f       	add	r30, r18
    2cea:	f3 1f       	adc	r31, r19
    2cec:	80 81       	ld	r24, Z
    2cee:	88 23       	and	r24, r24
    2cf0:	39 f7       	brne	.-50     	; 0x2cc0 <HCLCD_String_Write_Position+0x24>
		{
			HCLCD_WritChar4Bit(str[Counter]);  /* call LCD data write */
		}

}
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	cf 91       	pop	r28
    2cfe:	df 91       	pop	r29
    2d00:	08 95       	ret

00002d02 <TIMER1_VidInit>:
 *to have 2 ms on time ==> Put 500 in OCR1A
 */


void TIMER1_VidInit(void)
{
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
	/*Set Fast pwm mode with top-->ICR1*/
	CLR_BIT(TCCR1A,0);
    2d0a:	af e4       	ldi	r26, 0x4F	; 79
    2d0c:	b0 e0       	ldi	r27, 0x00	; 0
    2d0e:	ef e4       	ldi	r30, 0x4F	; 79
    2d10:	f0 e0       	ldi	r31, 0x00	; 0
    2d12:	80 81       	ld	r24, Z
    2d14:	8e 7f       	andi	r24, 0xFE	; 254
    2d16:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,1);
    2d18:	af e4       	ldi	r26, 0x4F	; 79
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	ef e4       	ldi	r30, 0x4F	; 79
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	80 81       	ld	r24, Z
    2d22:	82 60       	ori	r24, 0x02	; 2
    2d24:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,4);
    2d26:	ae e4       	ldi	r26, 0x4E	; 78
    2d28:	b0 e0       	ldi	r27, 0x00	; 0
    2d2a:	ee e4       	ldi	r30, 0x4E	; 78
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	80 81       	ld	r24, Z
    2d30:	80 61       	ori	r24, 0x10	; 16
    2d32:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,3);
    2d34:	ae e4       	ldi	r26, 0x4E	; 78
    2d36:	b0 e0       	ldi	r27, 0x00	; 0
    2d38:	ee e4       	ldi	r30, 0x4E	; 78
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	80 81       	ld	r24, Z
    2d3e:	88 60       	ori	r24, 0x08	; 8
    2d40:	8c 93       	st	X, r24

	/*Set non-inverting Fast pwm channel A*/
	SET_BIT(TCCR1A,7);
    2d42:	af e4       	ldi	r26, 0x4F	; 79
    2d44:	b0 e0       	ldi	r27, 0x00	; 0
    2d46:	ef e4       	ldi	r30, 0x4F	; 79
    2d48:	f0 e0       	ldi	r31, 0x00	; 0
    2d4a:	80 81       	ld	r24, Z
    2d4c:	80 68       	ori	r24, 0x80	; 128
    2d4e:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,6);
    2d50:	af e4       	ldi	r26, 0x4F	; 79
    2d52:	b0 e0       	ldi	r27, 0x00	; 0
    2d54:	ef e4       	ldi	r30, 0x4F	; 79
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	80 81       	ld	r24, Z
    2d5a:	8f 7b       	andi	r24, 0xBF	; 191
    2d5c:	8c 93       	st	X, r24

	/*Set Prescaler-->>64 Prescaler*/
	SET_BIT(TCCR1B,0);
    2d5e:	ae e4       	ldi	r26, 0x4E	; 78
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	ee e4       	ldi	r30, 0x4E	; 78
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	81 60       	ori	r24, 0x01	; 1
    2d6a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,1);
    2d6c:	ae e4       	ldi	r26, 0x4E	; 78
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	ee e4       	ldi	r30, 0x4E	; 78
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	80 81       	ld	r24, Z
    2d76:	82 60       	ori	r24, 0x02	; 2
    2d78:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,2);
    2d7a:	ae e4       	ldi	r26, 0x4E	; 78
    2d7c:	b0 e0       	ldi	r27, 0x00	; 0
    2d7e:	ee e4       	ldi	r30, 0x4E	; 78
    2d80:	f0 e0       	ldi	r31, 0x00	; 0
    2d82:	80 81       	ld	r24, Z
    2d84:	8b 7f       	andi	r24, 0xFB	; 251
    2d86:	8c 93       	st	X, r24
}
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <TIMER1_SetTopValue>:

void TIMER1_SetTopValue(u16 Copy_u16TopValue)
{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <TIMER1_SetTopValue+0x6>
    2d94:	cd b7       	in	r28, 0x3d	; 61
    2d96:	de b7       	in	r29, 0x3e	; 62
    2d98:	9a 83       	std	Y+2, r25	; 0x02
    2d9a:	89 83       	std	Y+1, r24	; 0x01
	ICR1=Copy_u16TopValue;
    2d9c:	e6 e4       	ldi	r30, 0x46	; 70
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	9a 81       	ldd	r25, Y+2	; 0x02
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
}
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <TIMER1_Set_OCR1A_Value>:

void TIMER1_Set_OCR1A_Value(u16 Copy_u16CTCValue)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <TIMER1_Set_OCR1A_Value+0x6>
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	9a 83       	std	Y+2, r25	; 0x02
    2dbe:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=Copy_u16CTCValue;
    2dc0:	ea e4       	ldi	r30, 0x4A	; 74
    2dc2:	f0 e0       	ldi	r31, 0x00	; 0
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc8:	91 83       	std	Z+1, r25	; 0x01
    2dca:	80 83       	st	Z, r24
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	cf 91       	pop	r28
    2dd2:	df 91       	pop	r29
    2dd4:	08 95       	ret

00002dd6 <main>:

int main(void)
{
    2dd6:	df 93       	push	r29
    2dd8:	cf 93       	push	r28
    2dda:	cd b7       	in	r28, 0x3d	; 61
    2ddc:	de b7       	in	r29, 0x3e	; 62
    2dde:	2e 97       	sbiw	r28, 0x0e	; 14
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
	/*Set Top value in ICR1*/
	TIMER1_SetTopValue(5000);
    2dea:	88 e8       	ldi	r24, 0x88	; 136
    2dec:	93 e1       	ldi	r25, 0x13	; 19
    2dee:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <TIMER1_SetTopValue>
	/*Timer1 Initialization---> MODE(14)-->FAST PWM-->TOP -->ICR1 */
	TIMER1_VidInit();
    2df2:	0e 94 81 16 	call	0x2d02	; 0x2d02 <TIMER1_VidInit>

	MDIO_SetPinDirection(MOTOR1_A1,MDIO_PORTC,PIN_OUTPUT);
    2df6:	83 e0       	ldi	r24, 0x03	; 3
    2df8:	62 e0       	ldi	r22, 0x02	; 2
    2dfa:	41 e0       	ldi	r20, 0x01	; 1
    2dfc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(MOTOR1_A2,MDIO_PORTC,PIN_OUTPUT);
    2e00:	84 e0       	ldi	r24, 0x04	; 4
    2e02:	62 e0       	ldi	r22, 0x02	; 2
    2e04:	41 e0       	ldi	r20, 0x01	; 1
    2e06:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>
	MDIO_SetPinDirection(MOTOR1_EN,MDIO_PORTD,PIN_OUTPUT);
    2e0a:	85 e0       	ldi	r24, 0x05	; 5
    2e0c:	63 e0       	ldi	r22, 0x03	; 3
    2e0e:	41 e0       	ldi	r20, 0x01	; 1
    2e10:	0e 94 b7 07 	call	0xf6e	; 0xf6e <MDIO_SetPinDirection>


	while(1)
	{
		//Set Forward Direction
		MDIO_SetPinValue(MOTOR1_A1,MDIO_PORTC,PIN_HIGH);
    2e14:	83 e0       	ldi	r24, 0x03	; 3
    2e16:	62 e0       	ldi	r22, 0x02	; 2
    2e18:	41 e0       	ldi	r20, 0x01	; 1
    2e1a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>
		MDIO_SetPinValue(MOTOR1_A2,MDIO_PORTC,PIN_LOW);
    2e1e:	84 e0       	ldi	r24, 0x04	; 4
    2e20:	62 e0       	ldi	r22, 0x02	; 2
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <MDIO_SetPinValue>

		if(Speed<=5000)
    2e28:	80 91 87 00 	lds	r24, 0x0087
    2e2c:	90 91 88 00 	lds	r25, 0x0088
    2e30:	23 e1       	ldi	r18, 0x13	; 19
    2e32:	89 38       	cpi	r24, 0x89	; 137
    2e34:	92 07       	cpc	r25, r18
    2e36:	70 f7       	brcc	.-36     	; 0x2e14 <main+0x3e>
		{
			TIMER1_Set_OCR1A_Value(Speed++);
    2e38:	80 91 87 00 	lds	r24, 0x0087
    2e3c:	90 91 88 00 	lds	r25, 0x0088
    2e40:	9c 01       	movw	r18, r24
    2e42:	01 96       	adiw	r24, 0x01	; 1
    2e44:	90 93 88 00 	sts	0x0088, r25
    2e48:	80 93 87 00 	sts	0x0087, r24
    2e4c:	c9 01       	movw	r24, r18
    2e4e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <TIMER1_Set_OCR1A_Value>
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e8       	ldi	r26, 0x80	; 128
    2e58:	bf e3       	ldi	r27, 0x3F	; 63
    2e5a:	8b 87       	std	Y+11, r24	; 0x0b
    2e5c:	9c 87       	std	Y+12, r25	; 0x0c
    2e5e:	ad 87       	std	Y+13, r26	; 0x0d
    2e60:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	4a e7       	ldi	r20, 0x7A	; 122
    2e70:	55 e4       	ldi	r21, 0x45	; 69
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	8f 83       	std	Y+7, r24	; 0x07
    2e7c:	98 87       	std	Y+8, r25	; 0x08
    2e7e:	a9 87       	std	Y+9, r26	; 0x09
    2e80:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e82:	6f 81       	ldd	r22, Y+7	; 0x07
    2e84:	78 85       	ldd	r23, Y+8	; 0x08
    2e86:	89 85       	ldd	r24, Y+9	; 0x09
    2e88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	40 e8       	ldi	r20, 0x80	; 128
    2e90:	5f e3       	ldi	r21, 0x3F	; 63
    2e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e96:	88 23       	and	r24, r24
    2e98:	2c f4       	brge	.+10     	; 0x2ea4 <main+0xce>
		__ticks = 1;
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	9e 83       	std	Y+6, r25	; 0x06
    2ea0:	8d 83       	std	Y+5, r24	; 0x05
    2ea2:	3f c0       	rjmp	.+126    	; 0x2f22 <main+0x14c>
	else if (__tmp > 65535)
    2ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea6:	78 85       	ldd	r23, Y+8	; 0x08
    2ea8:	89 85       	ldd	r24, Y+9	; 0x09
    2eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	3f ef       	ldi	r19, 0xFF	; 255
    2eb0:	4f e7       	ldi	r20, 0x7F	; 127
    2eb2:	57 e4       	ldi	r21, 0x47	; 71
    2eb4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eb8:	18 16       	cp	r1, r24
    2eba:	4c f5       	brge	.+82     	; 0x2f0e <main+0x138>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ebc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ebe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ec0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ec2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	40 e2       	ldi	r20, 0x20	; 32
    2eca:	51 e4       	ldi	r21, 0x41	; 65
    2ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	cd 01       	movw	r24, r26
    2ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2edc:	dc 01       	movw	r26, r24
    2ede:	cb 01       	movw	r24, r22
    2ee0:	9e 83       	std	Y+6, r25	; 0x06
    2ee2:	8d 83       	std	Y+5, r24	; 0x05
    2ee4:	0f c0       	rjmp	.+30     	; 0x2f04 <main+0x12e>
    2ee6:	80 e9       	ldi	r24, 0x90	; 144
    2ee8:	91 e0       	ldi	r25, 0x01	; 1
    2eea:	9c 83       	std	Y+4, r25	; 0x04
    2eec:	8b 83       	std	Y+3, r24	; 0x03
    2eee:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	f1 f7       	brne	.-4      	; 0x2ef2 <main+0x11c>
    2ef6:	9c 83       	std	Y+4, r25	; 0x04
    2ef8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	01 97       	sbiw	r24, 0x01	; 1
    2f00:	9e 83       	std	Y+6, r25	; 0x06
    2f02:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f04:	8d 81       	ldd	r24, Y+5	; 0x05
    2f06:	9e 81       	ldd	r25, Y+6	; 0x06
    2f08:	00 97       	sbiw	r24, 0x00	; 0
    2f0a:	69 f7       	brne	.-38     	; 0x2ee6 <main+0x110>
    2f0c:	83 cf       	rjmp	.-250    	; 0x2e14 <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f10:	78 85       	ldd	r23, Y+8	; 0x08
    2f12:	89 85       	ldd	r24, Y+9	; 0x09
    2f14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	9e 83       	std	Y+6, r25	; 0x06
    2f20:	8d 83       	std	Y+5, r24	; 0x05
    2f22:	8d 81       	ldd	r24, Y+5	; 0x05
    2f24:	9e 81       	ldd	r25, Y+6	; 0x06
    2f26:	9a 83       	std	Y+2, r25	; 0x02
    2f28:	89 83       	std	Y+1, r24	; 0x01
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f2e:	01 97       	sbiw	r24, 0x01	; 1
    2f30:	f1 f7       	brne	.-4      	; 0x2f2e <main+0x158>
    2f32:	9a 83       	std	Y+2, r25	; 0x02
    2f34:	89 83       	std	Y+1, r24	; 0x01
    2f36:	6e cf       	rjmp	.-292    	; 0x2e14 <main+0x3e>

00002f38 <__udivmodsi4>:
    2f38:	a1 e2       	ldi	r26, 0x21	; 33
    2f3a:	1a 2e       	mov	r1, r26
    2f3c:	aa 1b       	sub	r26, r26
    2f3e:	bb 1b       	sub	r27, r27
    2f40:	fd 01       	movw	r30, r26
    2f42:	0d c0       	rjmp	.+26     	; 0x2f5e <__udivmodsi4_ep>

00002f44 <__udivmodsi4_loop>:
    2f44:	aa 1f       	adc	r26, r26
    2f46:	bb 1f       	adc	r27, r27
    2f48:	ee 1f       	adc	r30, r30
    2f4a:	ff 1f       	adc	r31, r31
    2f4c:	a2 17       	cp	r26, r18
    2f4e:	b3 07       	cpc	r27, r19
    2f50:	e4 07       	cpc	r30, r20
    2f52:	f5 07       	cpc	r31, r21
    2f54:	20 f0       	brcs	.+8      	; 0x2f5e <__udivmodsi4_ep>
    2f56:	a2 1b       	sub	r26, r18
    2f58:	b3 0b       	sbc	r27, r19
    2f5a:	e4 0b       	sbc	r30, r20
    2f5c:	f5 0b       	sbc	r31, r21

00002f5e <__udivmodsi4_ep>:
    2f5e:	66 1f       	adc	r22, r22
    2f60:	77 1f       	adc	r23, r23
    2f62:	88 1f       	adc	r24, r24
    2f64:	99 1f       	adc	r25, r25
    2f66:	1a 94       	dec	r1
    2f68:	69 f7       	brne	.-38     	; 0x2f44 <__udivmodsi4_loop>
    2f6a:	60 95       	com	r22
    2f6c:	70 95       	com	r23
    2f6e:	80 95       	com	r24
    2f70:	90 95       	com	r25
    2f72:	9b 01       	movw	r18, r22
    2f74:	ac 01       	movw	r20, r24
    2f76:	bd 01       	movw	r22, r26
    2f78:	cf 01       	movw	r24, r30
    2f7a:	08 95       	ret

00002f7c <__prologue_saves__>:
    2f7c:	2f 92       	push	r2
    2f7e:	3f 92       	push	r3
    2f80:	4f 92       	push	r4
    2f82:	5f 92       	push	r5
    2f84:	6f 92       	push	r6
    2f86:	7f 92       	push	r7
    2f88:	8f 92       	push	r8
    2f8a:	9f 92       	push	r9
    2f8c:	af 92       	push	r10
    2f8e:	bf 92       	push	r11
    2f90:	cf 92       	push	r12
    2f92:	df 92       	push	r13
    2f94:	ef 92       	push	r14
    2f96:	ff 92       	push	r15
    2f98:	0f 93       	push	r16
    2f9a:	1f 93       	push	r17
    2f9c:	cf 93       	push	r28
    2f9e:	df 93       	push	r29
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	ca 1b       	sub	r28, r26
    2fa6:	db 0b       	sbc	r29, r27
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	f8 94       	cli
    2fac:	de bf       	out	0x3e, r29	; 62
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	cd bf       	out	0x3d, r28	; 61
    2fb2:	09 94       	ijmp

00002fb4 <__epilogue_restores__>:
    2fb4:	2a 88       	ldd	r2, Y+18	; 0x12
    2fb6:	39 88       	ldd	r3, Y+17	; 0x11
    2fb8:	48 88       	ldd	r4, Y+16	; 0x10
    2fba:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fbc:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fbe:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fc0:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fc2:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fc4:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fc6:	b9 84       	ldd	r11, Y+9	; 0x09
    2fc8:	c8 84       	ldd	r12, Y+8	; 0x08
    2fca:	df 80       	ldd	r13, Y+7	; 0x07
    2fcc:	ee 80       	ldd	r14, Y+6	; 0x06
    2fce:	fd 80       	ldd	r15, Y+5	; 0x05
    2fd0:	0c 81       	ldd	r16, Y+4	; 0x04
    2fd2:	1b 81       	ldd	r17, Y+3	; 0x03
    2fd4:	aa 81       	ldd	r26, Y+2	; 0x02
    2fd6:	b9 81       	ldd	r27, Y+1	; 0x01
    2fd8:	ce 0f       	add	r28, r30
    2fda:	d1 1d       	adc	r29, r1
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	ed 01       	movw	r28, r26
    2fe8:	08 95       	ret

00002fea <_exit>:
    2fea:	f8 94       	cli

00002fec <__stop_program>:
    2fec:	ff cf       	rjmp	.-2      	; 0x2fec <__stop_program>
